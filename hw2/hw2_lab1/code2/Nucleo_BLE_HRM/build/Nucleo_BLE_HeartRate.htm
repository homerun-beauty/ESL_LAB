<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\Nucleo_BLE_HeartRate.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\Nucleo_BLE_HeartRate.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Apr 08 14:56:01 2020
<BR><P>
<H3>Maximum Stack Usage =        864 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; $Super$$main &rArr; DeviceInformationService::DeviceInformationService(BLEDevice&, const char*, const char*, const char*, const char*, const char*, const char*) &rArr; GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned) &rArr; __aeabi_memcpy
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[277]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1eb]">__rw::__rw_throw(int, ...)</a><BR>
 <LI><a href="#[275]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ee]">__rw::__rw_allocate(unsigned, int)</a><BR>
 <LI><a href="#[1b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">NMI_Handler</a><BR>
 <LI><a href="#[1c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">HardFault_Handler</a><BR>
 <LI><a href="#[1d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">MemManage_Handler</a><BR>
 <LI><a href="#[1e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">BusFault_Handler</a><BR>
 <LI><a href="#[1f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">UsageFault_Handler</a><BR>
 <LI><a href="#[20]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">SVC_Handler</a><BR>
 <LI><a href="#[21]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">DebugMon_Handler</a><BR>
 <LI><a href="#[22]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">PendSV_Handler</a><BR>
 <LI><a href="#[23]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">SysTick_Handler</a><BR>
 <LI><a href="#[36]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">ADC_IRQHandler</a><BR>
 <LI><a href="#[270]">__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[270]">__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6c]">&lang;Func1&rang;</a> from SerialBase.o(i.<Func1>) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
 <LI><a href="#[6b]">&lang;Func5&rang;</a> from locale.o(i.<Func5>) referenced from locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
 <LI><a href="#[36]">ADC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1e]">BusFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[30]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[31]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[32]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[33]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[34]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[35]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[50]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[51]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[52]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[54]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[55]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[56]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[21]">DebugMon_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2a]">EXTI0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[47]">EXTI15_10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2b]">EXTI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2c]">EXTI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2d]">EXTI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2e]">EXTI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[37]">EXTI9_5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[118]">EXTI_irq_handler</a> from bluenrg_shield_bsp.o(.text) referenced from bluenrg_shield_bsp.o(.text)
 <LI><a href="#[28]">FLASH_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c]">HardFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[40]">I2C1_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3f]">I2C1_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[42]">I2C2_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[41]">I2C2_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[59]">I2C3_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[58]">I2C3_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d]">MemManage_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b]">NMI_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[53]">OTG_FS_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[49]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[25]">PVD_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[22]">PendSV_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[29]">RCC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[48]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[27]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a]">Reset_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4b]">SDIO_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[43]">SPI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[44]">SPI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4d]">SPI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5b]">SPI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[20]">SVC_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[23]">SysTick_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[61]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[26]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[38]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3b]">TIM1_CC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[39]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3c]">TIM2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3d]">TIM3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3e]">TIM4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4c]">TIM5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[45]">USART1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[46]">USART2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[57]">USART6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11c]">USER_BUTTON_EXTI_irq_handler</a> from bluenrg_shield_bsp.o(.text) referenced from bluenrg_shield_bsp.o(.text)
 <LI><a href="#[1f]">UsageFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[24]">WWDG_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[d1]">update_handler()</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[cf]">aliveness_handler()</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[ce]">connectionCallback(unsigned short, const Gap::ConnectionParams_t*)</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[71]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[cb]">disconnectionCallback(unsigned short, Gap::DisconnectionReason_t)</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[86]">BlueNRGGap::disconnect(Gap::DisconnectionReason_t)</a> from bluenrggap.o(.text) referenced from bluenrggap.o(.constdata__ZTV10BlueNRGGap)
 <LI><a href="#[82]">BlueNRGGap::setAddress(Gap::addr_type_e, const unsigned char*)</a> from bluenrggap.o(.text) referenced from bluenrggap.o(.constdata__ZTV10BlueNRGGap)
 <LI><a href="#[8d]">BlueNRGGap::getAppearance(unsigned short*)</a> from bluenrggap.o(.text) referenced from bluenrggap.o(.constdata__ZTV10BlueNRGGap)
 <LI><a href="#[8b]">BlueNRGGap::getDeviceName(unsigned char*, unsigned*)</a> from bluenrggap.o(.text) referenced from bluenrggap.o(.constdata__ZTV10BlueNRGGap)
 <LI><a href="#[8c]">BlueNRGGap::setAppearance(unsigned short)</a> from bluenrggap.o(.text) referenced from bluenrggap.o(.constdata__ZTV10BlueNRGGap)
 <LI><a href="#[8a]">BlueNRGGap::setDeviceName(const unsigned char*)</a> from bluenrggap.o(.text) referenced from bluenrggap.o(.constdata__ZTV10BlueNRGGap)
 <LI><a href="#[85]">BlueNRGGap::stopAdvertising()</a> from bluenrggap.o(.text) referenced from bluenrggap.o(.constdata__ZTV10BlueNRGGap)
 <LI><a href="#[84]">BlueNRGGap::startAdvertising(const GapAdvertisingParams&)</a> from bluenrggap.o(.text) referenced from bluenrggap.o(.constdata__ZTV10BlueNRGGap)
 <LI><a href="#[83]">BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)</a> from bluenrggap.o(.text) referenced from bluenrggap.o(.constdata__ZTV10BlueNRGGap)
 <LI><a href="#[89]">BlueNRGGap::updateConnectionParams(unsigned short, const Gap::ConnectionParams_t*)</a> from bluenrggap.o(.text) referenced from bluenrggap.o(.constdata__ZTV10BlueNRGGap)
 <LI><a href="#[87]">BlueNRGGap::getPreferredConnectionParams(Gap::ConnectionParams_t*)</a> from bluenrggap.o(.text) referenced from bluenrggap.o(.constdata__ZTV10BlueNRGGap)
 <LI><a href="#[88]">BlueNRGGap::setPreferredConnectionParams(const Gap::ConnectionParams_t*)</a> from bluenrggap.o(.text) referenced from bluenrggap.o(.constdata__ZTV10BlueNRGGap)
 <LI><a href="#[69]">PayloadUnit::PayloadUnit()</a> from bluenrggap.o(i._ZN11PayloadUnitC1Ev) referenced from bluenrggap.o(i._ZN10PayloadPtrC1EPKhh)
 <LI><a href="#[8f]">BlueNRGDevice::getVersion()</a> from bluenrgdevice.o(.text) referenced from bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
 <LI><a href="#[94]">BlueNRGDevice::setTxPower(signed char)</a> from bluenrgdevice.o(.text) referenced from bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
 <LI><a href="#[95]">BlueNRGDevice::waitForEvent()</a> from bluenrgdevice.o(.text) referenced from bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
 <LI><a href="#[91]">BlueNRGDevice::getGattServer()</a> from bluenrgdevice.o(.text) referenced from bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
 <LI><a href="#[92]">BlueNRGDevice::init()</a> from bluenrgdevice.o(.text) referenced from bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
 <LI><a href="#[93]">BlueNRGDevice::reset()</a> from bluenrgdevice.o(.text) referenced from bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
 <LI><a href="#[90]">BlueNRGDevice::getGap()</a> from bluenrgdevice.o(.text) referenced from bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
 <LI><a href="#[97]">BlueNRGDevice::~BlueNRGDevice__deallocating()</a> from bluenrgdevice.o(.text) referenced from bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
 <LI><a href="#[96]">BlueNRGDevice::~BlueNRGDevice()</a> from bluenrgdevice.o(.text) referenced from bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
 <LI><a href="#[96]">BlueNRGDevice::~BlueNRGDevice()</a> from bluenrgdevice.o(.text) referenced from bluenrgdevice.o(.text)
 <LI><a href="#[98]">HeartRateService::onDataWritten(const GattCharacteristicWriteCBParams*)</a> from main.o(i._ZN16HeartRateService13onDataWrittenEPK31GattCharacteristicWriteCBParams) referenced from main.o(.constdata__ZTV16HeartRateService)
 <LI><a href="#[99]">BlueNRGGattServer::addService(GattService&)</a> from bluenrggattserver.o(.text) referenced from bluenrggattserver.o(.constdata__ZTV17BlueNRGGattServer)
 <LI><a href="#[9b]">BlueNRGGattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool)</a> from bluenrggattserver.o(.text) referenced from bluenrggattserver.o(.constdata__ZTV17BlueNRGGattServer)
 <LI><a href="#[9a]">BlueNRGGattServer::readValue(unsigned short, unsigned char*, unsigned short*)</a> from bluenrggattserver.o(.text) referenced from bluenrggattserver.o(.constdata__ZTV17BlueNRGGattServer)
 <LI><a href="#[5f]">BlueNRGGattServer::~BlueNRGGattServer()</a> from bluenrgdevice.o(i._ZN17BlueNRGGattServerD1Ev) referenced from bluenrgdevice.o(.text)
 <LI><a href="#[5f]">BlueNRGGattServer::~BlueNRGGattServer()</a> from bluenrgdevice.o(i._ZN17BlueNRGGattServerD1Ev) referenced from bluenrggattserver.o(i._ZN17BlueNRGGattServer11getInstanceEv)
 <LI><a href="#[9d]">GapAdvertisingData::~GapAdvertisingData__deallocating()</a> from gapadvertisingdata.o(.text) referenced from gapadvertisingdata.o(.constdata__ZTV18GapAdvertisingData)
 <LI><a href="#[9c]">GapAdvertisingData::~GapAdvertisingData()</a> from gapadvertisingdata.o(.text) referenced from gapadvertisingdata.o(.constdata__ZTV18GapAdvertisingData)
 <LI><a href="#[9f]">GapAdvertisingParams::~GapAdvertisingParams__deallocating()</a> from gapadvertisingparams.o(.text) referenced from gapadvertisingparams.o(.constdata__ZTV20GapAdvertisingParams)
 <LI><a href="#[9e]">GapAdvertisingParams::~GapAdvertisingParams()</a> from gapadvertisingparams.o(.text) referenced from gapadvertisingparams.o(.constdata__ZTV20GapAdvertisingParams)
 <LI><a href="#[67]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[a4]">UUID::~UUID__deallocating()</a> from uuid.o(.text) referenced from uuid.o(.constdata__ZTV4UUID)
 <LI><a href="#[a3]">UUID::~UUID()</a> from uuid.o(.text) referenced from uuid.o(.constdata__ZTV4UUID)
 <LI><a href="#[b1]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
 <LI><a href="#[b1]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[81]">__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)</a> from rwstdexcept.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIcEE13_C_maker_funcEiPKcj) referenced from rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs)
 <LI><a href="#[76]">__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</a> from rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev) referenced from rwcats.o(i.__sti___10_rwcats_cpp_64e8068e)
 <LI><a href="#[70]">__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()</a> from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev) referenced from messages.o(i._ZSt13__rw_get_catsv)
 <LI><a href="#[19]">__rw::__rw_throw_exception_noex(int, char*)</a> from rwthrowproc_impl_noex.o(i._ZN4__rw25__rw_throw_exception_noexEiPc) referenced 2 times from rwthrowproc_noex.o(.data)
 <LI><a href="#[a5]">mbed::FileHandle::~FileHandle__sub_object()</a> from retarget.o(i._ZN4mbed10FileHandleD2Ev) referenced from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[6d]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
 <LI><a href="#[6e]">mbed::TimerEvent::irq(unsigned)</a> from TimerEvent.o(i._ZN4mbed10TimerEvent3irqEj) referenced from TimerEvent.o(i._ZN4mbed10TimerEventC2Ev)
 <LI><a href="#[a6]">mbed::TimerEvent::~TimerEvent__sub_object()</a> from TimerEvent.o(i._ZN4mbed10TimerEventD2Ev) referenced from TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[80]">void mbed::FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::membercaller&lang;HeartRateService&rang;(void*, char*, const GattCharacteristicWriteCBParams*)</a> from main.o(t._ZN4mbed26FunctionPointerWithContextIPK31GattCharacteristicWriteCBParamsE12membercallerI16HeartRateServiceEEvPvPcS3_) referenced from main.o(t._ZN4mbed38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsE3addI16HeartRateServiceEEPNS_26FunctionPointerWithContextIS3_EEPT_MSA_FvS3_E)
 <LI><a href="#[a7]">mbed::CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::~CallChainOfFunctionPointersWithContext()</a> from bluenrgdevice.o(t._ZN4mbed38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsED1Ev) referenced from bluenrgdevice.o(.constdata__ZTVN4mbed38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsEE)
 <LI><a href="#[60]">mbed::Serial::~Serial()</a> from Serial.o(i._ZN4mbed6SerialD1Ev) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[60]">mbed::Serial::~Serial()</a> from Serial.o(i._ZN4mbed6SerialD1Ev) referenced from utils.o(.text)
 <LI><a href="#[a9]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[a9]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[aa]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[aa]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[a8]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[a8]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[ac]">mbed::Stream::~Stream__sub_object()</a> from Stream.o(i._ZN4mbed6StreamD2Ev) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[ad]">mbed::Ticker::handler()</a> from Ticker.o(i._ZN4mbed6Ticker7handlerEv) referenced from Ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[5e]">mbed::Ticker::~Ticker()</a> from Ticker.o(i._ZN4mbed6TickerD1Ev) referenced from Ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[5e]">mbed::Ticker::~Ticker()</a> from Ticker.o(i._ZN4mbed6TickerD1Ev) referenced from main.o(.text)
 <LI><a href="#[ae]">mbed::FileBase::~FileBase()</a> from FileBase.o(i._ZN4mbed8FileBaseD1Ev) referenced from FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[af]">mbed::FileLike::~FileLike__sub_object()</a> from FileLike.o(i._ZN4mbed8FileLikeD2Ev) referenced from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[5d]">BLEDevice::~BLEDevice()</a> from main.o(i._ZN9BLEDeviceD1Ev) referenced from main.o(.text)
 <LI><a href="#[a2]">GapAdvertisingParams::getTimeout() const</a> from gapadvertisingparams.o(i._ZNK20GapAdvertisingParams10getTimeoutEv) referenced from gapadvertisingparams.o(.constdata__ZTV20GapAdvertisingParams)
 <LI><a href="#[a1]">GapAdvertisingParams::getInterval() const</a> from gapadvertisingparams.o(i._ZNK20GapAdvertisingParams11getIntervalEv) referenced from gapadvertisingparams.o(.constdata__ZTV20GapAdvertisingParams)
 <LI><a href="#[a0]">GapAdvertisingParams::getAdvertisingType() const</a> from gapadvertisingparams.o(i._ZNK20GapAdvertisingParams18getAdvertisingTypeEv) referenced from gapadvertisingparams.o(.constdata__ZTV20GapAdvertisingParams)
 <LI><a href="#[b6]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
 <LI><a href="#[bc]">std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const</a> from rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[bb]">std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</a> from rwstdexcept.o(t._ZNKSt8messagesIcE7do_openERKSsRKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[6a]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</a> from char.o(t._ZNSsD1Ev) referenced from locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
 <LI><a href="#[6a]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</a> from char.o(t._ZNSsD1Ev) referenced from locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev)
 <LI><a href="#[b3]">std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()</a> from char.o(i._ZNSt12ctype_bynameIcED0Ev) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[b2]">std::ctype_byname&lang;char&rang;::~ctype_byname()</a> from char.o(i._ZNSt12ctype_bynameIcED1Ev) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[b5]">std::__rw_exception::~__rw_exception()</a> from rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev) referenced from rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
 <LI><a href="#[7f]">std::__rw_open_cat_data::__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataC1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
 <LI><a href="#[7e]">std::__rw_open_cat_data::~__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataD1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
 <LI><a href="#[7e]">std::__rw_open_cat_data::~__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataD1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev)
 <LI><a href="#[b4]">std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</a> from char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[b4]">std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</a> from char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[b8]">std::ctype&lang;char&rang;::~ctype__deallocating()</a> from char.o(i._ZNSt5ctypeIcED0Ev) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[b7]">std::ctype&lang;char&rang;::~ctype()</a> from char.o(i._ZNSt5ctypeIcED1Ev) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[b0]">std::locale::facet::~facet__deallocating()</a> from rwstdexcept.o(i._ZNSt6locale5facetD0Ev) referenced from rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
 <LI><a href="#[6f]">std::locale::~locale()</a> from locale.o(i._ZNSt6localeD1Ev) referenced from locale.o(i._ZNSt6locale7classicEv)
 <LI><a href="#[ba]">std::messages&lang;char&rang;::~messages__deallocating()</a> from rwstdexcept.o(i._ZNSt8messagesIcED0Ev) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[b9]">std::messages&lang;char&rang;::~messages()</a> from rwstdexcept.o(i._ZNSt8messagesIcED1Ev) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[ab]">thunk{-92} to mbed::Serial::_putc(int)</a> from Serial.o(i._ZThn92_N4mbed6Serial5_putcEi) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[75]">operator delete[] (void*)</a> from array_del.o(i._ZdaPv) referenced from cxa_vec_new.o(i.__cxa_vec_new)
 <LI><a href="#[8e]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from bluenrgdevice.o(.constdata__ZTV10GattServer)
 <LI><a href="#[8e]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 7 times from bluenrgdevice.o(.constdata__ZTV21BLEDeviceInstanceBase)
 <LI><a href="#[8e]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 12 times from bluenrgdevice.o(.constdata__ZTV3Gap)
 <LI><a href="#[8e]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[8e]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[8e]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[8e]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[62]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[c1]">__sti___10_locale_cpp_ff99fc7b</a> from locale.o(i.__sti___10_locale_cpp_ff99fc7b) referenced from locale.o(.init_array)
 <LI><a href="#[c2]">__sti___10_rwcats_cpp_64e8068e</a> from rwcats.o(i.__sti___10_rwcats_cpp_64e8068e) referenced from rwcats.o(.init_array)
 <LI><a href="#[be]">__sti___17_BlueNRGDevice_cpp_ef81e865</a> from bluenrgdevice.o(.text) referenced from bluenrgdevice.o(.init_array)
 <LI><a href="#[c0]">__sti___8_char_cpp_a3dc957a</a> from char.o(i.__sti___8_char_cpp_a3dc957a) referenced from char.o(.init_array)
 <LI><a href="#[bd]">__sti___8_main_cpp_ble</a> from main.o(.text) referenced from main.o(.init_array)
 <LI><a href="#[bf]">__sti___9_Utils_cpp_pc</a> from utils.o(.text) referenced from utils.o(.init_array)
 <LI><a href="#[64]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[65]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[63]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[74]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[73]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[72]">fputc</a> from fputc_fp.o(.text) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[72]">fputc</a> from fputc_fp.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[72]">fputc</a> from fputc_fp.o(.text) referenced from printfa.o(i.__0vfprintf)
 <LI><a href="#[77]">gpio_irq0</a> from gpio_irq_api.o(i.gpio_irq0) referenced from gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[78]">gpio_irq1</a> from gpio_irq_api.o(i.gpio_irq1) referenced from gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[79]">gpio_irq2</a> from gpio_irq_api.o(i.gpio_irq2) referenced from gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[7a]">gpio_irq3</a> from gpio_irq_api.o(i.gpio_irq3) referenced from gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[7b]">gpio_irq4</a> from gpio_irq_api.o(i.gpio_irq4) referenced from gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[7c]">gpio_irq5</a> from gpio_irq_api.o(i.gpio_irq5) referenced from gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[7d]">gpio_irq6</a> from gpio_irq_api.o(i.gpio_irq6) referenced from gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[66]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[5c]">main</a> from retarget.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[f3]">new_hci_event</a> from hci.o(.text) referenced from hci.o(.text)
 <LI><a href="#[68]">timer_irq_handler</a> from hal_tick.o(i.timer_irq_handler) referenced from hal_tick.o(i.HAL_InitTick)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[62]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[27b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[c4]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1af]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c6]"></a>__use_full_stdio</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry6b.o(.ARM.Collect$$$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = __use_full_stdio &rArr; _initio &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[18c]"></a>__main_after_initio</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry6b.o(.ARM.Collect$$$$00000006))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[27c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c8]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[27d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[27e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[27f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[c9]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[280]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[cb]"></a>disconnectionCallback(unsigned short, Gap::DisconnectionReason_t)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = disconnectionCallback(unsigned short, Gap::DisconnectionReason_t) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::startAdvertising()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>connectionCallback(unsigned short, const Gap::ConnectionParams_t*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = connectionCallback(unsigned short, const Gap::ConnectionParams_t*) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>update_handler()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>aliveness_handler()</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aliveness_handler() &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>$Super$$main</STRONG> (Thumb, 328 bytes, Stack size 520 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = $Super$$main &rArr; DeviceInformationService::DeviceInformationService(BLEDevice&, const char*, const char*, const char*, const char*, const char*, const char*) &rArr; GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::accumulateAdvertisingPayload(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::startAdvertising()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach(void(*)(), float)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInformationService::DeviceInformationService(BLEDevice&, const char*, const char*, const char*, const char*, const char*, const char*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::HeartRateService(BLEDevice&, unsigned char, unsigned char)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::updateHeartRate(unsigned char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryService::BatteryService(BLEDevice&, unsigned char)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::init()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addFlags(unsigned char)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addAppearance(GapAdvertisingData::Appearance)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>HCI_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_tail
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[e8]"></a>HCI_Input</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HCI_Input &rArr; enqueue_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_irq_handler
</UL>

<P><STRONG><a name="[e9]"></a>HCI_Process</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = HCI_Process &rArr; HCI_Event_CB &rArr; BlueNRGGattServer::getInstance() &rArr; BlueNRGGattServer::BlueNRGGattServer() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned short&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove_head
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_is_empty
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_tail
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI_IRQ
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_SPI_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::waitForEvent()
</UL>

<P><STRONG><a name="[ef]"></a>hci_write</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Write_Serial
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
</UL>

<P><STRONG><a name="[f1]"></a>hci_send_cmd</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[f3]"></a>new_hci_event</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = new_hci_event &rArr; Disable_SPI_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_SPI_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>hci_send_req</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Expired
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI_IRQ
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_packet_complete_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_hw_version
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_calc_crc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_read_data_block
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_program_data_block
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_erase_sector
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_reset_blue_flag
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_erase_blue_flag
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_get_updater_buffer_size
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_get_updater_version
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_reboot
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_start
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_tone_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_parameter_update_request
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate_gap_procedure
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_create_connection
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_start_auto_conn_establishment
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_start_general_discovery_proc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_start_limited_discovery_proc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_auth_requirement
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_charac_descriptor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_charac_value
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_long_charac_val
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_charac_val
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_response
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_without_response
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_all_charac_descriptors
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_all_charac_of_serv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_find_included_services
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_all_prim_services
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_set_desc_value
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_allow_read
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char_desc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_end
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_transmitter_test
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_receiver_test
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_supported_states
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_channel_map
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_supported_features
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_rssi
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_transmit_power_level
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_remove_device_from_white_list
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_add_device_to_white_list
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_clear_white_list
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_white_list_size
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_neg_reply
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_reply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_create_connection
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_bd_addr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_random_address
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_advertising_channel_tx_power
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_resp_data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertise_enable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_data
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_parameters
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_buffer_size
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_version
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnect
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
</UL>

<P><STRONG><a name="[f8]"></a>hci_reset</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[fa]"></a>hci_disconnect</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[fb]"></a>hci_le_read_local_version</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[fc]"></a>hci_le_read_buffer_size</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[fd]"></a>hci_le_set_advertising_parameters</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[fe]"></a>hci_le_set_advertising_data</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[ff]"></a>hci_le_set_advertise_enable</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[100]"></a>hci_le_rand</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[101]"></a>hci_le_set_scan_resp_data</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = hci_le_set_scan_resp_data &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::startAdvertising(const GapAdvertisingParams&)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConnectable
</UL>

<P><STRONG><a name="[102]"></a>hci_le_read_advertising_channel_tx_power</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[103]"></a>hci_le_set_random_address</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[104]"></a>hci_read_bd_addr</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[105]"></a>hci_le_create_connection</STRONG> (Thumb, 172 bytes, Stack size 96 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[106]"></a>hci_le_encrypt</STRONG> (Thumb, 124 bytes, Stack size 96 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[107]"></a>hci_le_ltk_request_reply</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[108]"></a>hci_le_ltk_request_neg_reply</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[109]"></a>hci_le_read_white_list_size</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[10a]"></a>hci_le_clear_white_list</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[10b]"></a>hci_le_add_device_to_white_list</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[10c]"></a>hci_le_remove_device_from_white_list</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[10d]"></a>hci_read_transmit_power_level</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[10e]"></a>hci_read_rssi</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[10f]"></a>hci_le_read_local_supported_features</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[110]"></a>hci_le_read_channel_map</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[111]"></a>hci_le_read_supported_states</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[112]"></a>hci_le_receiver_test</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[113]"></a>hci_le_transmitter_test</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[114]"></a>hci_le_test_end</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[11c]"></a>USER_BUTTON_EXTI_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bluenrg_shield_bsp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bluenrg_shield_bsp.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>BlueNRG_SPI_Read_All</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, bluenrg_shield_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BlueNRG_SPI_Read_All &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_irq_handler
</UL>

<P><STRONG><a name="[118]"></a>EXTI_irq_handler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bluenrg_shield_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EXTI_irq_handler &rArr; BlueNRG_SPI_Read_All &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_head
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Read_All
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove_head
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_is_empty
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Input
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrg_shield_bsp.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>BNRG_SPI_Init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, bluenrg_shield_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BNRG_SPI_Init &rArr; spi_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[ed]"></a>Enable_SPI_IRQ</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluenrg_shield_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_SPI_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
</UL>

<P><STRONG><a name="[ea]"></a>Disable_SPI_IRQ</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluenrg_shield_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Disable_SPI_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_hci_event
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
</UL>

<P><STRONG><a name="[125]"></a>BlueNRG_SPI_Write</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, bluenrg_shield_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI_IRQ
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_SPI_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Write_Serial
</UL>

<P><STRONG><a name="[f0]"></a>Hal_Write_Serial</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, bluenrg_shield_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Expired
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write
</UL>

<P><STRONG><a name="[281]"></a>Clear_SPI_IRQ</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg_shield_bsp.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>Clear_SPI_EXTI_Flag</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg_shield_bsp.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>BlueNRG_RST</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bluenrg_shield_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BlueNRG_RST &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::reset()
</UL>

<P><STRONG><a name="[128]"></a>aci_gatt_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, bluenrg_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = aci_gatt_init &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[129]"></a>aci_gap_init</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, bluenrg_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = aci_gap_init &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[12a]"></a>aci_gap_set_non_discoverable</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bluenrg_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = aci_gap_set_non_discoverable &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::stopAdvertising()
</UL>

<P><STRONG><a name="[12b]"></a>aci_gap_set_discoverable</STRONG> (Thumb, 222 bytes, Stack size 344 bytes, bluenrg_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::startAdvertising(const GapAdvertisingParams&)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConnectable
</UL>

<P><STRONG><a name="[12c]"></a>aci_gap_update_adv_data</STRONG> (Thumb, 90 bytes, Stack size 304 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[12d]"></a>aci_gatt_add_serv</STRONG> (Thumb, 158 bytes, Stack size 320 bytes, bluenrg_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = aci_gatt_add_serv &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::addService(GattService&)
</UL>

<P><STRONG><a name="[12e]"></a>aci_gatt_add_char</STRONG> (Thumb, 214 bytes, Stack size 344 bytes, bluenrg_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = aci_gatt_add_char &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::addService(GattService&)
</UL>

<P><STRONG><a name="[12f]"></a>aci_gatt_add_char_desc</STRONG> (Thumb, 256 bytes, Stack size 344 bytes, bluenrg_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = aci_gatt_add_char_desc &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::addService(GattService&)
</UL>

<P><STRONG><a name="[130]"></a>aci_gatt_update_char_value</STRONG> (Thumb, 136 bytes, Stack size 328 bytes, bluenrg_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAppearance(unsigned short)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setDeviceName(const unsigned char*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool)
</UL>

<P><STRONG><a name="[131]"></a>aci_gatt_allow_read</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, bluenrg_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = aci_gatt_allow_read &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::Read_Request_CB(unsigned short)
</UL>

<P><STRONG><a name="[132]"></a>aci_gatt_set_desc_value</STRONG> (Thumb, 158 bytes, Stack size 320 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[133]"></a>aci_gatt_disc_all_prim_services</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[134]"></a>aci_gatt_find_included_services</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[135]"></a>aci_gatt_disc_all_charac_of_serv</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[136]"></a>aci_gatt_disc_all_charac_descriptors</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[137]"></a>aci_gatt_write_without_response</STRONG> (Thumb, 120 bytes, Stack size 320 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[138]"></a>aci_gatt_write_response</STRONG> (Thumb, 140 bytes, Stack size 328 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[139]"></a>aci_gatt_read_charac_val</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[13a]"></a>aci_gatt_read_long_charac_val</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[13b]"></a>aci_gatt_write_charac_value</STRONG> (Thumb, 124 bytes, Stack size 320 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[13c]"></a>aci_gatt_write_charac_descriptor</STRONG> (Thumb, 120 bytes, Stack size 320 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[13d]"></a>aci_hal_write_config_data</STRONG> (Thumb, 106 bytes, Stack size 312 bytes, bluenrg_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = aci_hal_write_config_data &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[13e]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, bluenrg_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = aci_hal_set_tx_power_level &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::setTxPower(signed char)
</UL>

<P><STRONG><a name="[13f]"></a>aci_gap_set_auth_requirement</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[140]"></a>aci_gap_start_limited_discovery_proc</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[141]"></a>aci_gap_start_general_discovery_proc</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[142]"></a>aci_gap_start_auto_conn_establishment</STRONG> (Thumb, 228 bytes, Stack size 328 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[143]"></a>aci_gap_create_connection</STRONG> (Thumb, 146 bytes, Stack size 88 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[144]"></a>aci_gap_terminate_gap_procedure</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[145]"></a>aci_gap_terminate</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, bluenrg_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = aci_gap_terminate &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::disconnect(Gap::DisconnectionReason_t)
</UL>

<P><STRONG><a name="[146]"></a>aci_l2cap_connection_parameter_update_request</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[147]"></a>aci_hal_tone_start</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[148]"></a>aci_updater_start</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[149]"></a>aci_updater_reboot</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[14a]"></a>aci_get_updater_version</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[14b]"></a>aci_get_updater_buffer_size</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[14c]"></a>aci_erase_blue_flag</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[14d]"></a>aci_reset_blue_flag</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[14e]"></a>aci_updater_erase_sector</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[14f]"></a>aci_updater_program_data_block</STRONG> (Thumb, 134 bytes, Stack size 312 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[150]"></a>aci_updater_read_data_block</STRONG> (Thumb, 98 bytes, Stack size 312 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[151]"></a>aci_updater_calc_crc</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[152]"></a>aci_updater_hw_version</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, bluenrg_hci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[e5]"></a>list_init_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
</UL>

<P><STRONG><a name="[eb]"></a>list_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_irq_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
</UL>

<P><STRONG><a name="[119]"></a>list_insert_head</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_irq_handler
</UL>

<P><STRONG><a name="[e6]"></a>list_insert_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_packet
</UL>

<P><STRONG><a name="[153]"></a>list_remove_node</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove_tail
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove_head
</UL>

<P><STRONG><a name="[ec]"></a>list_remove_head</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove_node
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_irq_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
</UL>

<P><STRONG><a name="[154]"></a>list_remove_tail</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove_node
</UL>

<P><STRONG><a name="[283]"></a>list_insert_node_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>list_insert_node_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>list_get_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>list_get_next_node</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>list_get_prev_node</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>Timer_Set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Timer_Set &rArr; Clock_Time &rArr; clock &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Write_Serial
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[288]"></a>Timer_Reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gp_timer.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>Timer_Restart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gp_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
</UL>

<P><STRONG><a name="[f7]"></a>Timer_Expired</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Timer_Expired &rArr; Clock_Time &rArr; clock &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Write_Serial
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[157]"></a>Timer_Remaining</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gp_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
</UL>

<P><STRONG><a name="[289]"></a>Clock_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>Clock_Time</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Clock_Time &rArr; clock &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Remaining
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Restart
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Expired
</UL>

<P><STRONG><a name="[159]"></a>Clock_Wait</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Clock_Wait &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[f2]"></a>Osal_MemCpy</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, osal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_read_data_block
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_program_data_block
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_create_connection
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_start_auto_conn_establishment
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_auth_requirement
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_charac_descriptor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_charac_value
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_response
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_without_response
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_set_desc_value
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char_desc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_supported_states
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_channel_map
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_supported_features
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_remove_device_from_white_list
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_add_device_to_white_list
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_reply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_create_connection
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_bd_addr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_random_address
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_resp_data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_data
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_parameters
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[f9]"></a>Osal_MemSet</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, osal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_hw_version
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_calc_crc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_read_data_block
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_program_data_block
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_erase_sector
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_reset_blue_flag
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_erase_blue_flag
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_get_updater_buffer_size
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_get_updater_version
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_reboot
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_updater_start
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_tone_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_parameter_update_request
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate_gap_procedure
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_create_connection
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_start_auto_conn_establishment
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_start_general_discovery_proc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_start_limited_discovery_proc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_auth_requirement
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_charac_descriptor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_charac_value
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_long_charac_val
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_charac_val
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_response
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_without_response
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_all_charac_descriptors
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_all_charac_of_serv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_find_included_services
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_all_prim_services
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_set_desc_value
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_allow_read
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char_desc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_end
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_transmitter_test
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_receiver_test
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_supported_states
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_channel_map
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_supported_features
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_rssi
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_transmit_power_level
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_remove_device_from_white_list
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_add_device_to_white_list
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_clear_white_list
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_white_list_size
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_neg_reply
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_reply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_create_connection
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_bd_addr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_random_address
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_advertising_channel_tx_power
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_resp_data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertise_enable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_data
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_parameters
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_buffer_size
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_version
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnect
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
</UL>

<P><STRONG><a name="[82]"></a>BlueNRGGap::setAddress(Gap::addr_type_e, const unsigned char*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bluenrggap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = BlueNRGGap::setAddress(Gap::addr_type_e, const unsigned char*) &rArr; btle_init &rArr; aci_hal_write_config_data &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrggap.o(.constdata__ZTV10BlueNRGGap)
</UL>
<P><STRONG><a name="[83]"></a>BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)</STRONG> (Thumb, 952 bytes, Stack size 120 bytes, bluenrggap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&) &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadUnit::getLenPtr()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadUnit::getDataPtr()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadPtr::PayloadPtr(const unsigned char*, unsigned char)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadPtr::getUnitAtIndex(int)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::getPayloadLen() const
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::getPayload() const
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHighPowerAndPALevelValue(signed char, signed char&, signed char&)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrggap.o(.constdata__ZTV10BlueNRGGap)
</UL>
<P><STRONG><a name="[84]"></a>BlueNRGGap::startAdvertising(const GapAdvertisingParams&)</STRONG> (Thumb, 888 bytes, Stack size 72 bytes, bluenrggap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = BlueNRGGap::startAdvertising(const GapAdvertisingParams&) &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_resp_data
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrggap.o(.constdata__ZTV10BlueNRGGap)
</UL>
<P><STRONG><a name="[85]"></a>BlueNRGGap::stopAdvertising()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bluenrggap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = BlueNRGGap::stopAdvertising() &rArr; aci_gap_set_non_discoverable &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrggap.o(.constdata__ZTV10BlueNRGGap)
</UL>
<P><STRONG><a name="[86]"></a>BlueNRGGap::disconnect(Gap::DisconnectionReason_t)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bluenrggap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BlueNRGGap::disconnect(Gap::DisconnectionReason_t) &rArr; aci_gap_terminate &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrggap.o(.constdata__ZTV10BlueNRGGap)
</UL>
<P><STRONG><a name="[87]"></a>BlueNRGGap::getPreferredConnectionParams(Gap::ConnectionParams_t*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluenrggap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bluenrggap.o(.constdata__ZTV10BlueNRGGap)
</UL>
<P><STRONG><a name="[88]"></a>BlueNRGGap::setPreferredConnectionParams(const Gap::ConnectionParams_t*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluenrggap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bluenrggap.o(.constdata__ZTV10BlueNRGGap)
</UL>
<P><STRONG><a name="[89]"></a>BlueNRGGap::updateConnectionParams(unsigned short, const Gap::ConnectionParams_t*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluenrggap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bluenrggap.o(.constdata__ZTV10BlueNRGGap)
</UL>
<P><STRONG><a name="[8a]"></a>BlueNRGGap::setDeviceName(const unsigned char*)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bluenrggap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = BlueNRGGap::setDeviceName(const unsigned char*) &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrggap.o(.constdata__ZTV10BlueNRGGap)
</UL>
<P><STRONG><a name="[8b]"></a>BlueNRGGap::getDeviceName(unsigned char*, unsigned*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bluenrggap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BlueNRGGap::getDeviceName(unsigned char*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrggap.o(.constdata__ZTV10BlueNRGGap)
</UL>
<P><STRONG><a name="[8c]"></a>BlueNRGGap::setAppearance(unsigned short)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bluenrggap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = BlueNRGGap::setAppearance(unsigned short) &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrggap.o(.constdata__ZTV10BlueNRGGap)
</UL>
<P><STRONG><a name="[8d]"></a>BlueNRGGap::getAppearance(unsigned short*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bluenrggap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BlueNRGGap::getAppearance(unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrggap.o(.constdata__ZTV10BlueNRGGap)
</UL>
<P><STRONG><a name="[17d]"></a>BlueNRGGap::setConnectionHandle(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bluenrggap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
</UL>

<P><STRONG><a name="[179]"></a>BlueNRGGap::getConnectionHandle()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluenrggap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::Read_Request_CB(unsigned short)
</UL>

<P><STRONG><a name="[17a]"></a>BlueNRGGap::getAddress()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bluenrggap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[16e]"></a>BlueNRGGap::getIsSetAddress()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluenrggap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::init()
</UL>

<P><STRONG><a name="[dc]"></a>createBLEDeviceInstance()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bluenrgdevice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ble
</UL>

<P><STRONG><a name="[170]"></a>BlueNRGDevice::BlueNRGDevice()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bluenrgdevice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_BlueNRGDevice_cpp_ef81e865
</UL>

<P><STRONG><a name="[28a]"></a>BlueNRGDevice::BlueNRGDevice__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bluenrgdevice.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>BlueNRGDevice::~BlueNRGDevice()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrgdevice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::~BlueNRGDevice__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bluenrgdevice.o(.text)
<LI> bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
</UL>
<P><STRONG><a name="[28b]"></a>BlueNRGDevice::~BlueNRGDevice__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bluenrgdevice.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>BlueNRGDevice::~BlueNRGDevice__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bluenrgdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BlueNRGDevice::~BlueNRGDevice__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::~BlueNRGDevice()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
</UL>
<P><STRONG><a name="[90]"></a>BlueNRGDevice::getGap()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluenrgdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BlueNRGDevice::getGap() &rArr; BlueNRGGap::getInstance()
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::getInstance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
</UL>
<P><STRONG><a name="[91]"></a>BlueNRGDevice::getGattServer()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bluenrgdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = BlueNRGDevice::getGattServer() &rArr; BlueNRGGattServer::BlueNRGGattServer() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned short&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::BlueNRGGattServer()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
</UL>
<P><STRONG><a name="[8f]"></a>BlueNRGDevice::getVersion()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bluenrgdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BlueNRGDevice::getVersion() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
</UL>
<P><STRONG><a name="[92]"></a>BlueNRGDevice::init()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bluenrgdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = BlueNRGDevice::init() &rArr; btle_init &rArr; aci_hal_write_config_data &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::getIsSetAddress()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::getInstance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
</UL>
<P><STRONG><a name="[93]"></a>BlueNRGDevice::reset()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluenrgdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BlueNRGDevice::reset() &rArr; BlueNRG_RST &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_RST
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
</UL>
<P><STRONG><a name="[94]"></a>BlueNRGDevice::setTxPower(signed char)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, bluenrgdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BlueNRGDevice::setTxPower(signed char) &rArr; aci_hal_set_tx_power_level &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHighPowerAndPALevelValue(signed char, signed char&, signed char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
</UL>
<P><STRONG><a name="[95]"></a>BlueNRGDevice::waitForEvent()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluenrgdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = BlueNRGDevice::waitForEvent() &rArr; HCI_Process &rArr; HCI_Event_CB &rArr; BlueNRGGattServer::getInstance() &rArr; BlueNRGGattServer::BlueNRGGattServer() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned short&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrgdevice.o(.constdata__ZTV13BlueNRGDevice)
</UL>
<P><STRONG><a name="[28c]"></a>BlueNRGDevice::getIsInitialized()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluenrgdevice.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>BlueNRGGattServer::addService(GattService&)</STRONG> (Thumb, 1528 bytes, Stack size 192 bytes, bluenrggattserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = BlueNRGGattServer::addService(GattService&) &rArr; aci_gatt_add_char_desc &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char_desc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattCharacteristic::getProperties() const
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattAttribute::setHandle(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrggattserver.o(.constdata__ZTV17BlueNRGGattServer)
</UL>
<P><STRONG><a name="[9a]"></a>BlueNRGGattServer::readValue(unsigned short, unsigned char*, unsigned short*)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bluenrggattserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BlueNRGGattServer::readValue(unsigned short, unsigned char*, unsigned short*) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrggattserver.o(.constdata__ZTV17BlueNRGGattServer)
</UL>
<P><STRONG><a name="[174]"></a>BlueNRGGattServer::getCharacteristicFromHandle(unsigned short)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, bluenrggattserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BlueNRGGattServer::getCharacteristicFromHandle(unsigned short) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattCharacteristic::getProperties() const
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool)
</UL>

<P><STRONG><a name="[9b]"></a>BlueNRGGattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool)</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, bluenrggattserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = BlueNRGGattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool) &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::map&lang;unsigned short, unsigned short, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator -&rang;() const
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattCharacteristic::getProperties() const
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::getInstance()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::getCharacteristicFromHandle(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrggattserver.o(.constdata__ZTV17BlueNRGGattServer)
</UL>
<P><STRONG><a name="[178]"></a>BlueNRGGattServer::Read_Request_CB(unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bluenrggattserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BlueNRGGattServer::Read_Request_CB(unsigned short) &rArr; aci_gatt_allow_read &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_allow_read
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::getConnectionHandle()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
</UL>

<P><STRONG><a name="[15d]"></a>btle_init</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, btle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = btle_init &rArr; aci_hal_write_config_data &rArr; hci_send_req &rArr; hci_send_cmd &rArr; hci_write &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Wait
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_RST
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNRG_SPI_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::getAddress()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAddress(Gap::addr_type_e, const unsigned char*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::init()
</UL>

<P><STRONG><a name="[17b]"></a>setConnectable</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, btle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_resp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Process
</UL>

<P><STRONG><a name="[17c]"></a>User_Process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, btle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConnectable
</UL>

<P><STRONG><a name="[28d]"></a>SPI_Poll</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, btle.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>HCI_Event_CB</STRONG> (Thumb, 562 bytes, Stack size 48 bytes, btle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = HCI_Event_CB &rArr; BlueNRGGattServer::getInstance() &rArr; BlueNRGGattServer::BlueNRGGattServer() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned short&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setConnectionHandle(unsigned short)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer::handleEvent(GattServerEvents::gattEvent_e, unsigned short)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::getInstance()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::Read_Request_CB(unsigned short)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::getCharacteristicFromHandle(unsigned short)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
</UL>

<P><STRONG><a name="[165]"></a>getHighPowerAndPALevelValue(signed char, signed char&, signed char&)</STRONG> (Thumb, 796 bytes, Stack size 24 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getHighPowerAndPALevelValue(signed char, signed char&, signed char&) &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::setTxPower(signed char)
</UL>

<P><STRONG><a name="[183]"></a>UUID::UUID(const unsigned char*)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, uuid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[28e]"></a>UUID::UUID__sub_object(const unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uuid.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>UUID::UUID(unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uuid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UUID::UUID(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInformationService::DeviceInformationService(BLEDevice&, const char*, const char*, const char*, const char*, const char*, const char*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::HeartRateService(BLEDevice&, unsigned char, unsigned char)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::setupService()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryService::BatteryService(BLEDevice&, unsigned char)
</UL>

<P><STRONG><a name="[28f]"></a>UUID::UUID__sub_object(unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uuid.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>UUID::~UUID()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uuid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInformationService::DeviceInformationService(BLEDevice&, const char*, const char*, const char*, const char*, const char*, const char*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::HeartRateService(BLEDevice&, unsigned char, unsigned char)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::setupService()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryService::BatteryService(BLEDevice&, unsigned char)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattService::~GattService()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::~UUID__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uuid.o(.constdata__ZTV4UUID)
</UL>
<P><STRONG><a name="[290]"></a>UUID::~UUID__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uuid.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>UUID::~UUID__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, uuid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UUID::~UUID__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::~UUID()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uuid.o(.constdata__ZTV4UUID)
</UL>
<P><STRONG><a name="[de]"></a>GapAdvertisingData::GapAdvertisingData()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GapAdvertisingData::GapAdvertisingData()
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ble
</UL>

<P><STRONG><a name="[291]"></a>GapAdvertisingData::GapAdvertisingData__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, gapadvertisingdata.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>GapAdvertisingData::~GapAdvertisingData()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::~BLEDevice()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::~GapAdvertisingData__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapadvertisingdata.o(.constdata__ZTV18GapAdvertisingData)
</UL>
<P><STRONG><a name="[292]"></a>GapAdvertisingData::~GapAdvertisingData__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, gapadvertisingdata.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>GapAdvertisingData::~GapAdvertisingData__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GapAdvertisingData::~GapAdvertisingData__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::~GapAdvertisingData()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapadvertisingdata.o(.constdata__ZTV18GapAdvertisingData)
</UL>
<P><STRONG><a name="[187]"></a>GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::accumulateAdvertisingPayload(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addFlags(unsigned char)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addAppearance(GapAdvertisingData::Appearance)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addTxPower(signed char)
</UL>

<P><STRONG><a name="[da]"></a>GapAdvertisingData::addAppearance(GapAdvertisingData::Appearance)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GapAdvertisingData::addAppearance(GapAdvertisingData::Appearance) &rArr; GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d8]"></a>GapAdvertisingData::addFlags(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GapAdvertisingData::addFlags(unsigned char) &rArr; GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[189]"></a>GapAdvertisingData::addTxPower(signed char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gapadvertisingdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[df]"></a>GapAdvertisingData::clear()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GapAdvertisingData::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ble
</UL>

<P><STRONG><a name="[15f]"></a>GapAdvertisingData::getPayload() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
</UL>

<P><STRONG><a name="[15e]"></a>GapAdvertisingData::getPayloadLen() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
</UL>

<P><STRONG><a name="[293]"></a>GapAdvertisingData::getAppearance() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gapadvertisingdata.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>BLEDevice::init()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bledevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLEDevice::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[dd]"></a>GapAdvertisingParams::GapAdvertisingParams(GapAdvertisingParams::AdvertisingType, unsigned short, unsigned short)</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, gapadvertisingparams.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GapAdvertisingParams::GapAdvertisingParams(GapAdvertisingParams::AdvertisingType, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ble
</UL>

<P><STRONG><a name="[294]"></a>GapAdvertisingParams::GapAdvertisingParams__sub_object(GapAdvertisingParams::AdvertisingType, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, gapadvertisingparams.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>GapAdvertisingParams::~GapAdvertisingParams()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gapadvertisingparams.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::~BLEDevice()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingParams::~GapAdvertisingParams__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapadvertisingparams.o(.constdata__ZTV20GapAdvertisingParams)
</UL>
<P><STRONG><a name="[295]"></a>GapAdvertisingParams::~GapAdvertisingParams__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, gapadvertisingparams.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>GapAdvertisingParams::~GapAdvertisingParams__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gapadvertisingparams.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GapAdvertisingParams::~GapAdvertisingParams__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingParams::~GapAdvertisingParams()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapadvertisingparams.o(.constdata__ZTV20GapAdvertisingParams)
</UL>
<P><STRONG><a name="[18a]"></a>GattService::GattService(const UUID&, GattCharacteristic**, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gattservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GattService::GattService(const UUID&, GattCharacteristic**, unsigned) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInformationService::DeviceInformationService(BLEDevice&, const char*, const char*, const char*, const char*, const char*, const char*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::setupService()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryService::BatteryService(BLEDevice&, unsigned char)
</UL>

<P><STRONG><a name="[296]"></a>GattService::GattService__sub_object(const UUID&, GattCharacteristic**, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, gattservice.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>_initio</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, initio_oe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_initio
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__use_full_stdio
</UL>

<P><STRONG><a name="[72]"></a>fputc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fputc_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fputc &rArr; _sys_write &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Address Reference Count : 3]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vfprintf)
</UL>
<P><STRONG><a name="[297]"></a>___aeabi_memcpy$ret</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>___aeabi_memcpy4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>_memcpy$base</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _memcpy$base
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[226]"></a>___aeabi_memcpy$base</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>

<P><STRONG><a name="[29a]"></a>___aeabi_memcpy4$base</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>___aeabi_memmove$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattService::GattService(const UUID&, GattCharacteristic**, unsigned)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::UUID(const unsigned char*)
</UL>

<P><STRONG><a name="[29f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>

<P><STRONG><a name="[15b]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>

<P><STRONG><a name="[2a0]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>___aeabi_memcpy$move</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>___aeabi_memmove4$base</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[2a5]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2a6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::UUID(unsigned short)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::UUID(const unsigned char*)
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::GapAdvertisingData()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::clear()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ble
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[2a8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>

<P><STRONG><a name="[167]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInformationService::DeviceInformationService(BLEDevice&, const char*, const char*, const char*, const char*, const char*, const char*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::getDeviceName(unsigned char*, unsigned*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setDeviceName(const unsigned char*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::startAdvertising(const GapAdvertisingParams&)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
</UL>

<P><STRONG><a name="[228]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
</UL>

<P><STRONG><a name="[169]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::getAppearance(unsigned short*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::getDeviceName(unsigned char*, unsigned*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::startAdvertising(const GapAdvertisingParams&)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
</UL>

<P><STRONG><a name="[212]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[18e]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[190]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[c3]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ble
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_Utils_cpp_pc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_BlueNRGDevice_cpp_ef81e865
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::getInstance()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::getGattServer()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp_64e8068e
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHighPowerAndPALevelValue(signed char, signed char&, signed char&)
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_f2ulz</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ffixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach(void(*)(), float)
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::setTxPower(signed char)
</UL>

<P><STRONG><a name="[2a9]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHighPowerAndPALevelValue(signed char, signed char&, signed char&)
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHighPowerAndPALevelValue(signed char, signed char&, signed char&)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[71]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[2aa]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2ab]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2ac]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>

<P><STRONG><a name="[19a]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1b2]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1b1]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[19f]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[18f]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>

<P><STRONG><a name="[63]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[2ad]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[233]"></a>__rt_new_handler_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[1ad]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[23f]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[ca]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[1a4]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[194]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[1a5]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_vec_delete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aeabi_vec_delete_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[198]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[1ac]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[c5]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2ae]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2af]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>

<P><STRONG><a name="[1e7]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[1b0]"></a>sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[1a2]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[2b0]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[23b]"></a>__ARM_vec_cleanup</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ARM_vec_cleanup_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_vec_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[23c]"></a>__cxa_rethrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_rethrow_noexceptions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[1ae]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[2b1]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
</UL>

<P><STRONG><a name="[66]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1b3]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[2b3]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
</UL>

<P><STRONG><a name="[2b4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, retarget.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = main &rArr; $Super$$main &rArr; DeviceInformationService::DeviceInformationService(BLEDevice&, const char*, const char*, const char*, const char*, const char*, const char*) &rArr; GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[251]"></a>HAL_GPIO_Init</STRONG> (Thumb, 560 bytes, Stack size 36 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[256]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_handler
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_InitTick</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, hal_tick.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 498 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 962 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
</UL>

<P><STRONG><a name="[1c7]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[1be]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1bf]"></a>NVIC_SetVector</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cmsis_nvic.o(i.NVIC_SetVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1cf]"></a>SetSysClock_PLL_HSE</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, system_stm32f4xx.o(i.SetSysClock_PLL_HSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SetSysClock_PLL_HSE &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1d0]"></a>Set_GPIO_Clock</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, pinmap.o(i.Set_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[1bd]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[61]"></a>SystemInit</STRONG> (Thumb, 210 bytes, Stack size 80 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SystemInit &rArr; SetSysClock_PLL_HSE &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[1ca]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[1d2]"></a>catgets(__rw::__rw_cat*, int, int, const char*)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rwcats.o(i._Z7catgetsPN4__rw8__rw_catEiiPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = catgets(__rw::__rw_cat*, int, int, const char*) &rArr; __rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
</UL>

<P><STRONG><a name="[1d4]"></a>catopen(const char*, int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rwcats.o(i._Z7catopenPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = catopen(const char*, int) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[16b]"></a>BlueNRGGap::getInstance()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bluenrgdevice.o(i._ZN10BlueNRGGap11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BlueNRGGap::getInstance()
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::Read_Request_CB(unsigned short)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::init()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::getGap()
</UL>

<P><STRONG><a name="[17e]"></a>GattServer::handleEvent(GattServerEvents::gattEvent_e, unsigned short)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, btle.o(i._ZN10GattServer11handleEventEN16GattServerEvents11gattEvent_eEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GattServer::handleEvent(GattServerEvents::gattEvent_e, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
</UL>

<P><STRONG><a name="[161]"></a>PayloadPtr::getUnitAtIndex(int)</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, bluenrggap.o(i._ZN10PayloadPtr14getUnitAtIndexEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PayloadPtr::getUnitAtIndex(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
</UL>

<P><STRONG><a name="[160]"></a>PayloadPtr::PayloadPtr(const unsigned char*, unsigned char)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, bluenrggap.o(i._ZN10PayloadPtrC1EPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = PayloadPtr::PayloadPtr(const unsigned char*, unsigned char) &rArr; __aeabi_vec_new_nocookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadUnit::getLenPtr()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_nocookie
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
</UL>

<P><STRONG><a name="[2b6]"></a>PayloadPtr::PayloadPtr__sub_object(const unsigned char*, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, bluenrggap.o(i._ZN10PayloadPtrC1EPKhh), UNUSED)

<P><STRONG><a name="[1d7]"></a>GattService::~GattService()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i._ZN11GattServiceD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GattService::~GattService()
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::~UUID()
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInformationService::DeviceInformationService(BLEDevice&, const char*, const char*, const char*, const char*, const char*, const char*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::setupService()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryService::BatteryService(BLEDevice&, unsigned char)
</UL>

<P><STRONG><a name="[2b7]"></a>GattService::~GattService__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN11GattServiceD1Ev), UNUSED)

<P><STRONG><a name="[163]"></a>PayloadUnit::getDataPtr()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluenrggap.o(i._ZN11PayloadUnit10getDataPtrEv))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
</UL>

<P><STRONG><a name="[162]"></a>PayloadUnit::getLenPtr()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluenrggap.o(i._ZN11PayloadUnit9getLenPtrEv))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadPtr::PayloadPtr(const unsigned char*, unsigned char)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
</UL>

<P><STRONG><a name="[69]"></a>PayloadUnit::PayloadUnit()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bluenrggap.o(i._ZN11PayloadUnitC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> bluenrggap.o(i._ZN10PayloadPtrC1EPKhh)
</UL>
<P><STRONG><a name="[2b8]"></a>PayloadUnit::PayloadUnit__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bluenrggap.o(i._ZN11PayloadUnitC1Ev), UNUSED)

<P><STRONG><a name="[173]"></a>GattAttribute::setHandle(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bluenrggattserver.o(i._ZN13GattAttribute9setHandleEt))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::addService(GattService&)
</UL>

<P><STRONG><a name="[d6]"></a>BatteryService::BatteryService(BLEDevice&, unsigned char)</STRONG> (Thumb, 140 bytes, Stack size 104 bytes, main.o(i._ZN14BatteryServiceC1ER9BLEDeviceh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BatteryService::BatteryService(BLEDevice&, unsigned char) &rArr; GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::addService(GattService&)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattService::~GattService()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::~UUID()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::UUID(unsigned short)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattService::GattService(const UUID&, GattCharacteristic**, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2b9]"></a>BatteryService::BatteryService__sub_object(BLEDevice&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, main.o(i._ZN14BatteryServiceC1ER9BLEDeviceh), UNUSED)

<P><STRONG><a name="[1da]"></a>HeartRateService::setupService()</STRONG> (Thumb, 132 bytes, Stack size 104 bytes, main.o(i._ZN16HeartRateService12setupServiceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = HeartRateService::setupService() &rArr; mbed::FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;* mbed::CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::add&lang;HeartRateService&rang;(T1*, void(T1::*)(const GattCharacteristicWriteCBParams*)) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;* mbed::CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::add&lang;HeartRateService&rang;(T1*, void(T1::*)(const GattCharacteristicWriteCBParams*))
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::addService(GattService&)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattService::~GattService()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::~UUID()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::UUID(unsigned short)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattService::GattService(const UUID&, GattCharacteristic**, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::HeartRateService(BLEDevice&, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[98]"></a>HeartRateService::onDataWritten(const GattCharacteristicWriteCBParams*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i._ZN16HeartRateService13onDataWrittenEPK31GattCharacteristicWriteCBParams))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV16HeartRateService)
</UL>
<P><STRONG><a name="[db]"></a>HeartRateService::updateHeartRate(unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, main.o(i._ZN16HeartRateService15updateHeartRateEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HeartRateService::updateHeartRate(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::HeartRateValueBytes::getNumValueBytes() const
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::HeartRateValueBytes::updateHeartRate(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1dc]"></a>HeartRateService::HeartRateValueBytes::updateHeartRate(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i._ZN16HeartRateService19HeartRateValueBytes15updateHeartRateEh))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::HeartRateService(BLEDevice&, unsigned char, unsigned char)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::updateHeartRate(unsigned char)
</UL>

<P><STRONG><a name="[d5]"></a>HeartRateService::HeartRateService(BLEDevice&, unsigned char, unsigned char)</STRONG> (Thumb, 228 bytes, Stack size 136 bytes, main.o(i._ZN16HeartRateServiceC1ER9BLEDevicehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = HeartRateService::HeartRateService(BLEDevice&, unsigned char, unsigned char) &rArr; HeartRateService::setupService() &rArr; mbed::FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;* mbed::CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::add&lang;HeartRateService&rang;(T1*, void(T1::*)(const GattCharacteristicWriteCBParams*)) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::HeartRateValueBytes::getNumValueBytes() const
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::HeartRateValueBytes::updateHeartRate(unsigned char)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::setupService()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::~UUID()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::UUID(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2ba]"></a>HeartRateService::HeartRateService__sub_object(BLEDevice&, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 136 bytes, main.o(i._ZN16HeartRateServiceC1ER9BLEDevicehh), UNUSED)

<P><STRONG><a name="[177]"></a>BlueNRGGattServer::getInstance()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bluenrggattserver.o(i._ZN17BlueNRGGattServer11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = BlueNRGGattServer::getInstance() &rArr; BlueNRGGattServer::BlueNRGGattServer() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned short&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::BlueNRGGattServer()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool)
</UL>

<P><STRONG><a name="[16d]"></a>BlueNRGGattServer::BlueNRGGattServer()</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, bluenrgdevice.o(i._ZN17BlueNRGGattServerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = BlueNRGGattServer::BlueNRGGattServer() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned short&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned short&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::getInstance()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::getGattServer()
</UL>

<P><STRONG><a name="[2bb]"></a>BlueNRGGattServer::BlueNRGGattServer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, bluenrgdevice.o(i._ZN17BlueNRGGattServerC1Ev), UNUSED)

<P><STRONG><a name="[5f]"></a>BlueNRGGattServer::~BlueNRGGattServer()</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bluenrgdevice.o(i._ZN17BlueNRGGattServerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BlueNRGGattServer::~BlueNRGGattServer() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::~CallChainOfFunctionPointersWithContext()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::begin()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::end()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_deallocate_buffers()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_put_node(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bluenrgdevice.o(.text)
<LI> bluenrggattserver.o(i._ZN17BlueNRGGattServer11getInstanceEv)
</UL>
<P><STRONG><a name="[2bc]"></a>BlueNRGGattServer::~BlueNRGGattServer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, bluenrgdevice.o(i._ZN17BlueNRGGattServerD1Ev), UNUSED)

<P><STRONG><a name="[1d8]"></a>GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned)</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, main.o(i._ZN18GattCharacteristicC1ERK4UUIDPhtthPP13GattAttributej))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInformationService::DeviceInformationService(BLEDevice&, const char*, const char*, const char*, const char*, const char*, const char*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::HeartRateService(BLEDevice&, unsigned char, unsigned char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryService::BatteryService(BLEDevice&, unsigned char)
</UL>

<P><STRONG><a name="[2bd]"></a>GattCharacteristic::GattCharacteristic__sub_object(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, main.o(i._ZN18GattCharacteristicC1ERK4UUIDPhtthPP13GattAttributej), UNUSED)

<P><STRONG><a name="[d7]"></a>DeviceInformationService::DeviceInformationService(BLEDevice&, const char*, const char*, const char*, const char*, const char*, const char*)</STRONG> (Thumb, 642 bytes, Stack size 288 bytes, main.o(i._ZN24DeviceInformationServiceC1ER9BLEDevicePKcS3_S3_S3_S3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = DeviceInformationService::DeviceInformationService(BLEDevice&, const char*, const char*, const char*, const char*, const char*, const char*) &rArr; GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::addService(GattService&)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattService::~GattService()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::~UUID()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::UUID(unsigned short)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattService::GattService(const UUID&, GattCharacteristic**, unsigned)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2be]"></a>DeviceInformationService::DeviceInformationService__sub_object(BLEDevice&, const char*, const char*, const char*, const char*, const char*, const char*)</STRONG> (Thumb, 0 bytes, Stack size 288 bytes, main.o(i._ZN24DeviceInformationServiceC1ER9BLEDevicePKcS3_S3_S3_S3_S3_), UNUSED)

<P><STRONG><a name="[1eb]"></a>__rw::__rw_throw(int, ...)</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, rwstdexcept.o(i._ZN4__rw10__rw_throwEiz))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1ee]"></a>__rw::__rw_allocate(unsigned, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rwalloc.o(i._ZN4__rw13__rw_allocateEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer()
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>

<P><STRONG><a name="[1ef]"></a>__rw::__rw_deallocate(void*, unsigned, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rwalloc.o(i._ZN4__rw15__rw_deallocateEPvji))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_deallocate_buffers()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>

<P><STRONG><a name="[b1]"></a>__rw::__rw_facet_base::_C_initfacet(const std::locale&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale))
<BR>[Address Reference Count : 2]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
<LI> rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
</UL>
<P><STRONG><a name="[1f0]"></a>__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memcpy$base
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>

<P><STRONG><a name="[2bf]"></a>__rw::__rw_locale_imp::__rw_locale_imp__sub_object(const char*, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj), UNUSED)

<P><STRONG><a name="[1f4]"></a>__rw::__rw_locale_imp::~__rw_locale_imp()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, locale.o(i._ZN4__rw15__rw_locale_impD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>

<P><STRONG><a name="[2c0]"></a>__rw::__rw_locale_imp::~__rw_locale_imp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZN4__rw15__rw_locale_impD1Ev), UNUSED)

<P><STRONG><a name="[1f7]"></a>__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, locale.o(i._ZN4__rw21__rw_use_c_lib_localeC1EPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
</UL>

<P><STRONG><a name="[2c1]"></a>__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale__sub_object(const char*, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, locale.o(i._ZN4__rw21__rw_use_c_lib_localeC1EPKci), UNUSED)

<P><STRONG><a name="[1f8]"></a>__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, char.o(i._ZN4__rw21__rw_use_c_lib_localeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
</UL>

<P><STRONG><a name="[2c2]"></a>__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZN4__rw21__rw_use_c_lib_localeD1Ev), UNUSED)

<P><STRONG><a name="[19]"></a>__rw::__rw_throw_exception_noex(int, char*)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rwthrowproc_impl_noex.o(i._ZN4__rw25__rw_throw_exception_noexEiPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rw::__rw_throw_exception_noex(int, char*) &rArr; fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_noex.o(.data)
</UL>
<P><STRONG><a name="[1d3]"></a>__rw::__catfind(__rw::__rw_cat*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rwcats.o(i._ZN4__rw9__catfindEPNS_8__rw_catE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catgets(__rw::__rw_cat*, int, int, const char*)
</UL>

<P><STRONG><a name="[2c3]"></a>mbed::FileHandle::~FileHandle()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, retarget.o(i._ZN4mbed10FileHandleD2Ev), UNUSED)

<P><STRONG><a name="[a5]"></a>mbed::FileHandle::~FileHandle__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, retarget.o(i._ZN4mbed10FileHandleD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[1fa]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase10_base_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-92} to mbed::Serial::_putc(int)
</UL>

<P><STRONG><a name="[6d]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[1fd]"></a>mbed::SerialBase::SerialBase(PinName, PinName)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName) &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[2c4]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_), UNUSED)

<P><STRONG><a name="[6e]"></a>mbed::TimerEvent::irq(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent3irqEj))
<BR>[Address Reference Count : 1]<UL><LI> TimerEvent.o(i._ZN4mbed10TimerEventC2Ev)
</UL>
<P><STRONG><a name="[201]"></a>mbed::TimerEvent::insert(unsigned long long)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent6insertEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::TimerEvent::insert(unsigned long long) &rArr; us_ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_insert_event
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[203]"></a>mbed::TimerEvent::remove()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::TimerEvent::remove() &rArr; us_ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>

<P><STRONG><a name="[205]"></a>mbed::TimerEvent::TimerEvent__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object() &rArr; us_ticker_set_handler &rArr; us_ticker_init &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker()
</UL>

<P><STRONG><a name="[2c5]"></a>mbed::TimerEvent::~TimerEvent()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventD2Ev), UNUSED)

<P><STRONG><a name="[a6]"></a>mbed::TimerEvent::~TimerEvent__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::TimerEvent::~TimerEvent__sub_object() &rArr; us_ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[1fc]"></a>mbed::FunctionPointer::call()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointer4callEv))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
</UL>

<P><STRONG><a name="[210]"></a>mbed::FunctionPointer::attach(void(*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointer6attachEPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach(void(*)(), float)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
</UL>

<P><STRONG><a name="[1b7]"></a>mbed::FunctionPointer::FunctionPointer(void(*)())</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointerC1EPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func1&rang;
</UL>

<P><STRONG><a name="[2c6]"></a>mbed::FunctionPointer::FunctionPointer__sub_object(void(*)())</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointerC1EPFvvE), UNUSED)

<P><STRONG><a name="[182]"></a>mbed::Serial::Serial(PinName, PinName, const char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_Utils_cpp_pc
</UL>

<P><STRONG><a name="[2c7]"></a>mbed::Serial::Serial__sub_object(PinName, PinName, const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc), UNUSED)

<P><STRONG><a name="[60]"></a>mbed::Serial::~Serial()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Serial::~Serial() &rArr; mbed::Stream::~Stream__sub_object() &rArr; fclose &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> utils.o(.text)
<LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[2c8]"></a>mbed::Serial::~Serial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialD1Ev), UNUSED)

<P><STRONG><a name="[a9]"></a>mbed::Stream::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[aa]"></a>mbed::Stream::lseek(long, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5lseekEli))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[a8]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[cc]"></a>mbed::Stream::printf(const char*, ...)</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, Stream.o(i._ZN4mbed6Stream6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::Stream::printf(const char*, ...) &rArr; fflush
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionCallback(unsigned short, const Gap::ConnectionParams_t*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectionCallback(unsigned short, Gap::DisconnectionReason_t)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAppearance(unsigned short)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setDeviceName(const unsigned char*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::disconnect(Gap::DisconnectionReason_t)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::stopAdvertising()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::startAdvertising(const GapAdvertisingParams&)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::getCharacteristicFromHandle(unsigned short)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::readValue(unsigned short, unsigned char*, unsigned short*)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::addService(GattService&)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::setTxPower(signed char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[207]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[2c9]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev), UNUSED)

<P><STRONG><a name="[ac]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::~Stream__sub_object() &rArr; fclose &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[20e]"></a>mbed::Ticker::setup(unsigned long long)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, Ticker.o(i._ZN4mbed6Ticker5setupEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::Ticker::setup(unsigned long long) &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach(void(*)(), float)
</UL>

<P><STRONG><a name="[d3]"></a>mbed::Ticker::attach(void(*)(), float)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, main.o(i._ZN4mbed6Ticker6attachEPFvvEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbed::Ticker::attach(void(*)(), float) &rArr; mbed::Ticker::setup(unsigned long long) &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ad]"></a>mbed::Ticker::handler()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, Ticker.o(i._ZN4mbed6Ticker7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Ticker::handler() &rArr; mbed::TimerEvent::insert(unsigned long long) &rArr; us_ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned long long)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[e3]"></a>mbed::Ticker::Ticker()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i._ZN4mbed6TickerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::Ticker::Ticker() &rArr; mbed::TimerEvent::TimerEvent__sub_object() &rArr; us_ticker_set_handler &rArr; us_ticker_init &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ble
</UL>

<P><STRONG><a name="[2ca]"></a>mbed::Ticker::Ticker__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN4mbed6TickerC1Ev), UNUSED)

<P><STRONG><a name="[5e]"></a>mbed::Ticker::~Ticker()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, Ticker.o(i._ZN4mbed6TickerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Ticker::~Ticker() &rArr; mbed::TimerEvent::~TimerEvent__sub_object() &rArr; us_ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> Ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[2cb]"></a>mbed::Ticker::~Ticker__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Ticker.o(i._ZN4mbed6TickerD1Ev), UNUSED)

<P><STRONG><a name="[215]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[211]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, FileBase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[213]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
</UL>

<P><STRONG><a name="[2cc]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE), UNUSED)

<P><STRONG><a name="[ae]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[2cd]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev), UNUSED)

<P><STRONG><a name="[20a]"></a>mbed::FileLike::FileLike__sub_object(const char*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileLike::FileLike__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[2ce]"></a>mbed::FileLike::~FileLike()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeD2Ev), UNUSED)

<P><STRONG><a name="[af]"></a>mbed::FileLike::~FileLike__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[214]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::fileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[216]"></a>mbed::FilePath::file()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::file()
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[247]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[217]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[248]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[218]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[2cf]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[1d9]"></a>BLEDevice::addService(GattService&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(i._ZN9BLEDevice10addServiceER11GattService))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLEDevice::addService(GattService&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInformationService::DeviceInformationService(BLEDevice&, const char*, const char*, const char*, const char*, const char*, const char*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::setupService()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryService::BatteryService(BLEDevice&, unsigned char)
</UL>

<P><STRONG><a name="[cd]"></a>BLEDevice::startAdvertising()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, main.o(i._ZN9BLEDevice16startAdvertisingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BLEDevice::startAdvertising()
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectionCallback(unsigned short, Gap::DisconnectionReason_t)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d9]"></a>BLEDevice::accumulateAdvertisingPayload(GapAdvertisingData::DataType, const unsigned char*, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, main.o(i._ZN9BLEDevice28accumulateAdvertisingPayloadEN18GapAdvertisingData8DataTypeEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BLEDevice::accumulateAdvertisingPayload(GapAdvertisingData::DataType, const unsigned char*, unsigned char) &rArr; GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[5d]"></a>BLEDevice::~BLEDevice()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i._ZN9BLEDeviceD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEDevice::~BLEDevice()
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingParams::~GapAdvertisingParams()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::~GapAdvertisingData()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2d0]"></a>BLEDevice::~BLEDevice__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN9BLEDeviceD1Ev), UNUSED)

<P><STRONG><a name="[1dd]"></a>HeartRateService::HeartRateValueBytes::getNumValueBytes() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i._ZNK16HeartRateService19HeartRateValueBytes16getNumValueBytesEv))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::HeartRateService(BLEDevice&, unsigned char, unsigned char)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::updateHeartRate(unsigned char)
</UL>

<P><STRONG><a name="[171]"></a>GattCharacteristic::getProperties() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bluenrggattserver.o(i._ZNK18GattCharacteristic13getPropertiesEv))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::getCharacteristicFromHandle(unsigned short)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::addService(GattService&)
</UL>

<P><STRONG><a name="[a2]"></a>GapAdvertisingParams::getTimeout() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gapadvertisingparams.o(i._ZNK20GapAdvertisingParams10getTimeoutEv))
<BR>[Address Reference Count : 1]<UL><LI> gapadvertisingparams.o(.constdata__ZTV20GapAdvertisingParams)
</UL>
<P><STRONG><a name="[a1]"></a>GapAdvertisingParams::getInterval() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gapadvertisingparams.o(i._ZNK20GapAdvertisingParams11getIntervalEv))
<BR>[Address Reference Count : 1]<UL><LI> gapadvertisingparams.o(.constdata__ZTV20GapAdvertisingParams)
</UL>
<P><STRONG><a name="[a0]"></a>GapAdvertisingParams::getAdvertisingType() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gapadvertisingparams.o(i._ZNK20GapAdvertisingParams18getAdvertisingTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> gapadvertisingparams.o(.constdata__ZTV20GapAdvertisingParams)
</UL>
<P><STRONG><a name="[b6]"></a>std::__rw_exception::what() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
</UL>
<P><STRONG><a name="[219]"></a>std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, messages.o(i._ZNKSt18__rw_messages_base11_C_cat_openERKSsRKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[21d]"></a>std::__rw_messages_base::_C_get_locale(int) const</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, messages.o(i._ZNKSt18__rw_messages_base13_C_get_localeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = std::__rw_messages_base::_C_get_locale(int) const &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[21f]"></a>std::__rw_messages_base::_C_get_message(int, int, int) const</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, messages.o(i._ZNKSt18__rw_messages_base14_C_get_messageEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = std::__rw_messages_base::_C_get_message(int, int, int) const &rArr; std::__rw_get_cats() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catgets(__rw::__rw_cat*, int, int, const char*)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[22b]"></a>std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, char.o(i._ZNKSt5ctypeIcE2isENSt10ctype_base4maskEc))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
</UL>

<P><STRONG><a name="[220]"></a>std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, locale.o(i._ZNKSt6locale13_C_make_facetERKNS_2idEbiPFPN4__rw15__rw_facet_baseEiPKcjE))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[223]"></a>std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, locale.o(i._ZNKSt6locale16_C_install_facetEPN4__rw15__rw_facet_baseERKNS_2idE))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const &rArr; __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>

<P><STRONG><a name="[224]"></a>std::locale::name() const</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, locale.o(i._ZNKSt6locale4nameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::locale::name() const &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
</UL>

<P><STRONG><a name="[225]"></a>std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, char.o(i._ZNSt11char_traitsIcE4copyEPcPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___aeabi_memcpy$base
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[227]"></a>std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, char.o(i._ZNSt12ctype_bynameIcE17_C_get_mask_tableEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
</UL>

<P><STRONG><a name="[229]"></a>std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, char.o(i._ZNSt12ctype_bynameIcEC1EPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[2d1]"></a>std::ctype_byname&lang;char&rang;::ctype_byname__sub_object(const char*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, char.o(i._ZNSt12ctype_bynameIcEC1EPKcj), UNUSED)

<P><STRONG><a name="[b3]"></a>std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, char.o(i._ZNSt12ctype_bynameIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating() &rArr; std::ctype_byname&lang;char&rang;::~ctype_byname() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[b2]"></a>std::ctype_byname&lang;char&rang;::~ctype_byname()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, char.o(i._ZNSt12ctype_bynameIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::ctype_byname&lang;char&rang;::~ctype_byname() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[2d2]"></a>std::ctype_byname&lang;char&rang;::~ctype_byname__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZNSt12ctype_bynameIcED1Ev), UNUSED)

<P><STRONG><a name="[1ed]"></a>std::__rw_exception::_C_vformat(int, std::__va_list)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rwstdexcept.o(i._ZNSt14__rw_exception10_C_vformatEiSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>

<P><STRONG><a name="[1ec]"></a>std::__rw_exception::__rw_exception()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__rw_exception::__rw_exception()
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>

<P><STRONG><a name="[2d3]"></a>std::__rw_exception::__rw_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionC1Ev), UNUSED)

<P><STRONG><a name="[b5]"></a>std::__rw_exception::~__rw_exception()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
</UL>
<P><STRONG><a name="[2d4]"></a>std::__rw_exception::~__rw_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev), UNUSED)

<P><STRONG><a name="[22e]"></a>std::__rw_messages_base::~__rw_messages_base()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt18__rw_messages_baseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::__rw_messages_base::~__rw_messages_base() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages()
</UL>

<P><STRONG><a name="[2d5]"></a>std::__rw_messages_base::~__rw_messages_base__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt18__rw_messages_baseD1Ev), UNUSED)

<P><STRONG><a name="[7f]"></a>std::__rw_open_cat_data::__rw_open_cat_data()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
</UL>
<P><STRONG><a name="[2d6]"></a>std::__rw_open_cat_data::__rw_open_cat_data__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataC1Ev), UNUSED)

<P><STRONG><a name="[7e]"></a>std::__rw_open_cat_data::~__rw_open_cat_data()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::__rw_open_cat_data::~__rw_open_cat_data() &rArr; std::locale::~locale() &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
<LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev)
</UL>
<P><STRONG><a name="[2d7]"></a>std::__rw_open_cat_data::~__rw_open_cat_data__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataD1Ev), UNUSED)

<P><STRONG><a name="[230]"></a>std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&) &rArr; std::locale::operator =(const std::locale&) &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
</UL>

<P><STRONG><a name="[b4]"></a>std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = std::ctype&lang;char&rang;::_C_initfacet(const std::locale&) &rArr; std::locale::name() const &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::name() const
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
<LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[22a]"></a>std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, char.o(i._ZNSt5ctypeIcEC1EPKNSt10ctype_base4maskEbj))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[2d8]"></a>std::ctype&lang;char&rang;::ctype__sub_object(const std::ctype_base::mask*, bool, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, char.o(i._ZNSt5ctypeIcEC1EPKNSt10ctype_base4maskEbj), UNUSED)

<P><STRONG><a name="[b8]"></a>std::ctype&lang;char&rang;::~ctype__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::ctype&lang;char&rang;::~ctype__deallocating() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
</UL>
<P><STRONG><a name="[b7]"></a>std::ctype&lang;char&rang;::~ctype()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype__deallocating()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
</UL>
<P><STRONG><a name="[2d9]"></a>std::ctype&lang;char&rang;::~ctype__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED1Ev), UNUSED)

<P><STRONG><a name="[b0]"></a>std::locale::facet::~facet__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt6locale5facetD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::locale::facet::~facet__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
</UL>
<P><STRONG><a name="[231]"></a>std::locale::_C_init()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, locale.o(i._ZNSt6locale7_C_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[21e]"></a>std::locale::classic()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, locale.o(i._ZNSt6locale7classicEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
</UL>

<P><STRONG><a name="[222]"></a>std::locale::locale(__rw::__rw_locale_imp*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeC1EPN4__rw15__rw_locale_impE))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[2da]"></a>std::locale::locale__sub_object(__rw::__rw_locale_imp*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeC1EPN4__rw15__rw_locale_impE), UNUSED)

<P><STRONG><a name="[22f]"></a>std::locale::locale(const std::locale&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, messages.o(i._ZNSt6localeC1ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
</UL>

<P><STRONG><a name="[2db]"></a>std::locale::locale__sub_object(const std::locale&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, messages.o(i._ZNSt6localeC1ERKS_), UNUSED)

<P><STRONG><a name="[1ea]"></a>std::locale::locale()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rwstdexcept.o(i._ZNSt6localeC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[2dc]"></a>std::locale::locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rwstdexcept.o(i._ZNSt6localeC1Ev), UNUSED)

<P><STRONG><a name="[6f]"></a>std::locale::~locale()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::locale::~locale() &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::~__rw_open_cat_data()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> locale.o(i._ZNSt6locale7classicEv)
</UL>
<P><STRONG><a name="[2dd]"></a>std::locale::~locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeD1Ev), UNUSED)

<P><STRONG><a name="[21c]"></a>std::locale::operator =(const std::locale&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, locale.o(i._ZNSt6localeaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::locale::operator =(const std::locale&) &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)
</UL>

<P><STRONG><a name="[ba]"></a>std::messages&lang;char&rang;::~messages__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::messages&lang;char&rang;::~messages__deallocating() &rArr; std::messages&lang;char&rang;::~messages() &rArr; std::__rw_messages_base::~__rw_messages_base() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[b9]"></a>std::messages&lang;char&rang;::~messages()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::messages&lang;char&rang;::~messages() &rArr; std::__rw_messages_base::~__rw_messages_base() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::~__rw_messages_base()
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[2de]"></a>std::messages&lang;char&rang;::~messages__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED1Ev), UNUSED)

<P><STRONG><a name="[22d]"></a>std::exception::exception()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception()
</UL>

<P><STRONG><a name="[2df]"></a>std::exception::exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev), UNUSED)

<P><STRONG><a name="[21a]"></a>std::__rw_get_cats()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, messages.o(i._ZSt13__rw_get_catsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::__rw_get_cats() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[ab]"></a>thunk{-92} to mbed::Serial::_putc(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, Serial.o(i._ZThn92_N4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = thunk{-92} to mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[75]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::~__rw_exception()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception_noex(int, char*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_vec_new.o(i.__cxa_vec_new)
</UL>
<P><STRONG><a name="[16a]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingParams::~GapAdvertisingParams__deallocating()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::~GapAdvertisingData__deallocating()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::~UUID__deallocating()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::~CallChainOfFunctionPointersWithContext()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::~BlueNRGDevice__deallocating()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages__deallocating()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::facet::~facet__deallocating()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype__deallocating()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>

<P><STRONG><a name="[168]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::startAdvertising(const GapAdvertisingParams&)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::getVersion()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp_64e8068e
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
</UL>

<P><STRONG><a name="[1d5]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;* mbed::CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::add&lang;HeartRateService&rang;(T1*, void(T1::*)(const GattCharacteristicWriteCBParams*))
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>

<P><STRONG><a name="[234]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e0]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[250]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>

<P><STRONG><a name="[2e1]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[1f9]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception_noex(int, char*)
</UL>

<P><STRONG><a name="[236]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e2]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[164]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
</UL>

<P><STRONG><a name="[2e3]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[2e4]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[237]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e5]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[20b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[2e6]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2e7]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[238]"></a>__0vfprintf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, printfa.o(i.__0vfprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e8]"></a>__1vfprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vfprintf), UNUSED)

<P><STRONG><a name="[2e9]"></a>__2vfprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vfprintf), UNUSED)

<P><STRONG><a name="[209]"></a>__c89vfprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[249]"></a>vfprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[239]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2ea]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2eb]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2ec]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1e5]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[23a]"></a>__ARM_array_new_general</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, array_new_general.o(i.__ARM_array_new_general))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>

<P><STRONG><a name="[1fe]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[1ab]"></a>__aeabi_vec_dtor_cookie</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_vec_dtor_cookie.o(i.__aeabi_vec_dtor_cookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>

<P><STRONG><a name="[1f2]"></a>__aeabi_vec_new_cookie</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aeabi_vec_new_cookie.o(i.__aeabi_vec_new_cookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_vec_new_nocookie</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, aeabi_vec_new_nocookie.o(i.__aeabi_vec_new_nocookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = __aeabi_vec_new_nocookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadPtr::PayloadPtr(const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[16c]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::getInstance()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGap::getInstance()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::getGattServer()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[8e]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 7]<UL><LI> bluenrgdevice.o(.constdata__ZTV3Gap)
<LI> bluenrgdevice.o(.constdata__ZTV10GattServer)
<LI> bluenrgdevice.o(.constdata__ZTV21BLEDeviceInstanceBase)
<LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[23e]"></a>__cxa_vec_new</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, cxa_vec_new.o(i.__cxa_vec_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_nocookie
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
</UL>

<P><STRONG><a name="[2ed]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2ee]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2ef]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[20d]"></a>fclose</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fclose_f.o(i._fclose$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fclose &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>

<P><STRONG><a name="[208]"></a>fflush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fflush_f.o(i._fflush$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fflush
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[20c]"></a>fopen</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fopen_f.o(i._fopen$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[242]"></a>freopen</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fopen_f.o(i._freopen$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[1a0]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[240]"></a>_sys_close</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, retarget.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[18b]"></a>_sys_open</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[241]"></a>_sys_seek</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[18d]"></a>_sys_write</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _sys_write &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[158]"></a>clock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtc_time.o(i.clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = clock &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
</UL>

<P><STRONG><a name="[1d1]"></a>error</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, error.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>

<P><STRONG><a name="[24a]"></a>exit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, exit.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[1a3]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[122]"></a>gpio_dir</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gpio_dir &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNRG_SPI_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[120]"></a>gpio_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNRG_SPI_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[11f]"></a>gpio_init_in</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio.o(i.gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNRG_SPI_Init
</UL>

<P><STRONG><a name="[e2]"></a>gpio_init_out</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gpio.o(i.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_ble
</UL>

<P><STRONG><a name="[124]"></a>gpio_irq_disable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio_irq_api.o(i.gpio_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_SPI_IRQ
</UL>

<P><STRONG><a name="[123]"></a>gpio_irq_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio_irq_api.o(i.gpio_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI_IRQ
</UL>

<P><STRONG><a name="[11d]"></a>gpio_irq_init</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, gpio_irq_api.o(i.gpio_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gpio_irq_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNRG_SPI_Init
</UL>

<P><STRONG><a name="[11e]"></a>gpio_irq_set</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, gpio_irq_api.o(i.gpio_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gpio_irq_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNRG_SPI_Init
</UL>

<P><STRONG><a name="[121]"></a>gpio_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_api.o(i.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNRG_SPI_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[192]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[d0]"></a>mbed_assert_internal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, assert.o(i.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_irq_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliveness_handler()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[24b]"></a>mbed_die</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1b6]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>mbed_sdk_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mbed_overrides.o(i.mbed_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed_sdk_init &rArr; HAL_Init &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24c]"></a>pin_function</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, pinmap.o(i.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>

<P><STRONG><a name="[24e]"></a>pin_mode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pin_mode &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[252]"></a>pinmap_merge</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pinmap_merge &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[253]"></a>pinmap_peripheral</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pinmap_peripheral &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[254]"></a>pinmap_pinout</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[1ff]"></a>serial_init</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, serial_api.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = serial_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[200]"></a>serial_irq_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.serial_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[1fb]"></a>serial_putc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, serial_api.o(i.serial_putc))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[11b]"></a>spi_init</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, spi_api.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = spi_init &rArr; pinmap_pinout &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNRG_SPI_Init
</UL>

<P><STRONG><a name="[117]"></a>spi_master_write</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, spi_api.o(i.spi_master_write))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Read_All
</UL>

<P><STRONG><a name="[68]"></a>timer_irq_handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_tick.o(i.timer_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer_irq_handler &rArr; us_ticker_irq_handler &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_tick.o(i.HAL_InitTick)
</UL>
<P><STRONG><a name="[259]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_clear_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[25a]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_disable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
</UL>

<P><STRONG><a name="[257]"></a>us_ticker_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = us_ticker_init &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_handler
</UL>

<P><STRONG><a name="[202]"></a>us_ticker_insert_event</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, us_ticker_api.o(i.us_ticker_insert_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = us_ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned long long)
</UL>

<P><STRONG><a name="[255]"></a>us_ticker_irq_handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = us_ticker_irq_handler &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_clear_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_handler
</UL>

<P><STRONG><a name="[20f]"></a>us_ticker_read</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>

<P><STRONG><a name="[204]"></a>us_ticker_remove_event</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_remove_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>

<P><STRONG><a name="[206]"></a>us_ticker_set_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = us_ticker_set_handler &rArr; us_ticker_init &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>

<P><STRONG><a name="[258]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_set_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_insert_event
</UL>

<P><STRONG><a name="[16f]"></a>wait</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wait_api.o(i.wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wait &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::reset()
</UL>

<P><STRONG><a name="[15a]"></a>wait_ms</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wait_api.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Wait
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[127]"></a>wait_us</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wait_api.o(i.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_RST
</UL>

<P><STRONG><a name="[27a]"></a>__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, char.o(t._ZN4__rw12__string_refIcSt11char_traitsIcESaIcEE10_C_inc_refEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>

<P><STRONG><a name="[26e]"></a>__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::__rw_tree_iter(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluenrgdevice.o(t._ZN4__rw14__rw_tree_iterISt4pairIKttEiPS3_RS3_NS_17__rw_rb_tree_nodeISaIS3_ES3_tNS_11__select1stIS3_tEEEEEC1ERKSB_))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pair&lang;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, bool&rang;::pair(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;&, const bool&)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[2f0]"></a>__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::__rw_tree_iter__sub_object(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, bluenrgdevice.o(t._ZN4__rw14__rw_tree_iterISt4pairIKttEiPS3_RS3_NS_17__rw_rb_tree_nodeISaIS3_ES3_tNS_11__select1stIS3_tEEEEEC1ERKSB_), UNUSED)

<P><STRONG><a name="[25b]"></a>__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator --()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bluenrggattserver.o(t._ZN4__rw14__rw_tree_iterISt4pairIKttEiPS3_RS3_NS_17__rw_rb_tree_nodeISaIS3_ES3_tNS_11__select1stIS3_tEEEEEmmEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator --()
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_parent()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_right()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned short, unsigned short&rang;&)
</UL>

<P><STRONG><a name="[25f]"></a>__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator ++()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bluenrgdevice.o(t._ZN4__rw14__rw_tree_iterISt4pairIKttEiPS3_RS3_NS_17__rw_rb_tree_nodeISaIS3_ES3_tNS_11__select1stIS3_tEEEEEppEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator ++()
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_parent()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_right()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[81]"></a>__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rwstdexcept.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIcEE13_C_maker_funcEiPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = __rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs)
</UL>
<P><STRONG><a name="[268]"></a>unsigned __rw::__rw_new_capacity&lang;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;&rang;(unsigned, const T1*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bluenrgdevice.o(t._ZN4__rw17__rw_new_capacityINS_9__rb_treeItSt4pairIKttENS_11__select1stIS4_tEESt4lessItESaIS4_EEEEEjjPKT_))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer()
</UL>

<P><STRONG><a name="[26b]"></a>__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_key()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bluenrggattserver.o(t._ZN4__rw17__rw_rb_tree_nodeISaISt4pairIKttEES3_tNS_11__select1stIS3_tEEE6_C_keyEv))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&)
</UL>

<P><STRONG><a name="[25e]"></a>__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_left()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bluenrgdevice.o(t._ZN4__rw17__rw_rb_tree_nodeISaISt4pairIKttEES3_tNS_11__select1stIS3_tEEE7_C_leftEv))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator --()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_leftmost() const
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator ++()
</UL>

<P><STRONG><a name="[25d]"></a>__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_right()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bluenrgdevice.o(t._ZN4__rw17__rw_rb_tree_nodeISaISt4pairIKttEES3_tNS_11__select1stIS3_tEEE8_C_rightEv))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator --()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_rightmost() const
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator ++()
</UL>

<P><STRONG><a name="[25c]"></a>__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_parent()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluenrgdevice.o(t._ZN4__rw17__rw_rb_tree_nodeISaISt4pairIKttEES3_tNS_11__select1stIS3_tEEE9_C_parentEv))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator --()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator ++()
</UL>

<P><STRONG><a name="[221]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEE6resizeEjRKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const
</UL>

<P><STRONG><a name="[1f5]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>

<P><STRONG><a name="[2f1]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEED1Ev), UNUSED)

<P><STRONG><a name="[76]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(i.__sti___10_rwcats_cpp_64e8068e)
</UL>
<P><STRONG><a name="[2f2]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev), UNUSED)

<P><STRONG><a name="[1f6]"></a>__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>

<P><STRONG><a name="[2f3]"></a>__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev), UNUSED)

<P><STRONG><a name="[21b]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::~__rw_open_cat_data()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[70]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(i._ZSt13__rw_get_catsv)
</UL>
<P><STRONG><a name="[2f4]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev), UNUSED)

<P><STRONG><a name="[260]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_get_link()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE11_C_get_linkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned short&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&)
</UL>

<P><STRONG><a name="[1e2]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_put_node(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, bool)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE11_C_put_nodeEPNS_17__rw_rb_tree_nodeIS8_S3_tS5_EEb))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::~BlueNRGGattServer()
</UL>

<P><STRONG><a name="[269]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_make_iter(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE12_C_make_iterEPNS_17__rw_rb_tree_nodeIS8_S3_tS5_EE))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::begin()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::end()
</UL>

<P><STRONG><a name="[262]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE13_C_erase_leafEPNS_17__rw_rb_tree_nodeIS8_S3_tS5_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_rightmost() const
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_leftmost() const
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_parent()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_right()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[266]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE13__rotate_leftEPNS_17__rw_rb_tree_nodeIS8_S3_tS5_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_parent()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_right()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[267]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE14__rotate_rightEPNS_17__rw_rb_tree_nodeIS8_S3_tS5_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_parent()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_right()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[261]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer()</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE17_C_add_new_bufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned __rw::__rw_new_capacity&lang;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;&rang;(unsigned, const T1*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_get_link()
</UL>

<P><STRONG><a name="[1e3]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_deallocate_buffers()</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE21_C_deallocate_buffersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_deallocate_buffers() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::~BlueNRGGattServer()
</UL>

<P><STRONG><a name="[1df]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::end()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE3endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::end()
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_make_iter(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::~BlueNRGGattServer()
</UL>

<P><STRONG><a name="[26a]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&)</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, bluenrggattserver.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE4findERS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::end()
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::less&lang;unsigned short&rang;::operator ()(const unsigned short&, const unsigned short&) const
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_key()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool __rw::operator ==&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::end()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_make_iter(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_right()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_left()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::__rw_tree_iter(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::map&lang;unsigned short, unsigned short, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&)
</UL>

<P><STRONG><a name="[1e0]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::begin()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::begin() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_leftmost() const
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_leftmost() const
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_make_iter(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::~BlueNRGGattServer()
</UL>

<P><STRONG><a name="[26f]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)</STRONG> (Thumb, 1554 bytes, Stack size 56 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE5eraseENS_14__rw_tree_iterIS3_iPS3_RS3_NS_17__rw_rb_tree_nodeIS8_S3_tS5_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_rightmost() const
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_leftmost() const
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool __rw::operator ==&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::end()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_put_node(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, bool)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_parent()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_right()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_left()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator ++()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::__rw_tree_iter(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[1e1]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE5eraseENS_14__rw_tree_iterIS3_iPS3_RS3_NS_17__rw_rb_tree_nodeIS8_S3_tS5_EEEESF_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_rightmost() const
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_leftmost() const
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool __rw::operator ==&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::begin()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::end()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator ++()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::__rw_tree_iter(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::~BlueNRGGattServer()
</UL>

<P><STRONG><a name="[172]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned short, unsigned short&rang;&)</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, bluenrggattserver.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE6insertERKS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned short, unsigned short&rang;&) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pair&lang;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, bool&rang;::pair(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;&, const bool&)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::less&lang;unsigned short&rang;::operator ()(const unsigned short&, const unsigned short&) const
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_key()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator --()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool __rw::operator ==&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::begin()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_make_iter(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_right()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::addService(GattService&)
</UL>

<P><STRONG><a name="[270]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE8_C_eraseEPNS_17__rw_rb_tree_nodeIS8_S3_tS5_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*) &rArr;  __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_put_node(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, bool)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_right()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[271]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&)</STRONG> (Thumb, 760 bytes, Stack size 56 bytes, bluenrggattserver.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE9_C_insertEPNS_17__rw_rb_tree_nodeIS8_S3_tS5_EESC_RKS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::less&lang;unsigned short&rang;::operator ()(const unsigned short&, const unsigned short&) const
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_key()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_rightmost() const
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_leftmost() const
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_make_iter(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_get_link()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_parent()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_right()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned short, unsigned short&rang;&)
</UL>

<P><STRONG><a name="[1de]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned short&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EEC1ERKS7_bRKS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned short&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_rightmost() const
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_leftmost() const
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_get_link()
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::BlueNRGGattServer()
</UL>

<P><STRONG><a name="[2f5]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rb_tree__sub_object(const std::less&lang;unsigned short&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, bluenrgdevice.o(t._ZN4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EEC1ERKS7_bRKS8_), UNUSED)

<P><STRONG><a name="[26d]"></a>bool __rw::operator ==&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrgdevice.o(t._ZN4__rweqISt4pairIKttEiPS3_RS3_S4_S5_NS_17__rw_rb_tree_nodeISaIS3_ES3_tNS_11__select1stIS3_tEEEEEEbRKNS_14__rw_tree_iterIT_T0_T1_T2_T5_EERKNSB_ISC_SD_T3_T4_SG_EE))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[80]"></a>void mbed::FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::membercaller&lang;HeartRateService&rang;(void*, char*, const GattCharacteristicWriteCBParams*)</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, main.o(t._ZN4mbed26FunctionPointerWithContextIPK31GattCharacteristicWriteCBParamsE12membercallerI16HeartRateServiceEEvPvPcS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = void mbed::FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::membercaller&lang;HeartRateService&rang;(void*, char*, const GattCharacteristicWriteCBParams*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(t._ZN4mbed38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsE3addI16HeartRateServiceEEPNS_26FunctionPointerWithContextIS3_EEPT_MSA_FvS3_E)
</UL>
<P><STRONG><a name="[1db]"></a>mbed::FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;* mbed::CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::add&lang;HeartRateService&rang;(T1*, void(T1::*)(const GattCharacteristicWriteCBParams*))</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, main.o(t._ZN4mbed38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsE3addI16HeartRateServiceEEPNS_26FunctionPointerWithContextIS3_EEPT_MSA_FvS3_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbed::FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;* mbed::CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::add&lang;HeartRateService&rang;(T1*, void(T1::*)(const GattCharacteristicWriteCBParams*)) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartRateService::setupService()
</UL>

<P><STRONG><a name="[a7]"></a>mbed::CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::~CallChainOfFunctionPointersWithContext()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bluenrgdevice.o(t._ZN4mbed38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::~CallChainOfFunctionPointersWithContext() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::~BlueNRGGattServer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrgdevice.o(.constdata__ZTVN4mbed38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsEE)
</UL>
<P><STRONG><a name="[2f6]"></a>mbed::CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::~CallChainOfFunctionPointersWithContext__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, bluenrgdevice.o(t._ZN4mbed38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsED1Ev), UNUSED)

<P><STRONG><a name="[176]"></a>__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::operator -&rang;() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bluenrggattserver.o(t._ZNK4__rw14__rw_tree_iterISt4pairIKttEiPS3_RS3_NS_17__rw_rb_tree_nodeISaIS3_ES3_tNS_11__select1stIS3_tEEEEEptEv))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool)
</UL>

<P><STRONG><a name="[264]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_leftmost() const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bluenrgdevice.o(t._ZNK4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE11_C_leftmostEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_leftmost() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned short&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::begin()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
</UL>

<P><STRONG><a name="[263]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_rightmost() const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bluenrgdevice.o(t._ZNK4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE12_C_rightmostEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_rightmost() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_right()
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned short&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
</UL>

<P><STRONG><a name="[265]"></a>__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bluenrgdevice.o(t._ZNK4__rw9__rb_treeItSt4pairIKttENS_11__select1stIS3_tEESt4lessItESaIS3_EE7_C_rootEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;::_C_parent()
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned short&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*)
</UL>

<P><STRONG><a name="[26c]"></a>std::less&lang;unsigned short&rang;::operator ()(const unsigned short&, const unsigned short&) const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bluenrggattserver.o(t._ZNKSt4lessItEclERKtS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::less&lang;unsigned short&rang;::operator ()(const unsigned short&, const unsigned short&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;*, const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned short, unsigned short&rang;&)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&)
</UL>

<P><STRONG><a name="[bc]"></a>std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[bb]"></a>std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rwstdexcept.o(t._ZNKSt8messagesIcE7do_openERKSsRKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[273]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, locale.o(t._ZNSs11_C_allocateEjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>

<P><STRONG><a name="[276]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, locale.o(t._ZNSs7replaceEjjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
</UL>

<P><STRONG><a name="[277]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, char.o(t._ZNSs7replaceEjjPKcjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
</UL>

<P><STRONG><a name="[275]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, char.o(t._ZNSs9_C_getRepEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[278]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, char.o(t._ZNSs9_C_unlinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1e8]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, locale.o(t._ZNSsC1EPKcRKSaIcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::name() const
</UL>

<P><STRONG><a name="[2f7]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const char*, const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, locale.o(t._ZNSsC1EPKcRKSaIcE), UNUSED)

<P><STRONG><a name="[1b8]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, locale.o(t._ZNSsC1ERKSaIcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func5&rang;
</UL>

<P><STRONG><a name="[2f8]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZNSsC1ERKSaIcE), UNUSED)

<P><STRONG><a name="[1e9]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, char.o(t._ZNSsC1ERKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[2f9]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, char.o(t._ZNSsC1ERKSs), UNUSED)

<P><STRONG><a name="[6a]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, char.o(t._ZNSsD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::~__rw_messages_base()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
<LI> locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev)
</UL>
<P><STRONG><a name="[2fa]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(t._ZNSsD1Ev), UNUSED)

<P><STRONG><a name="[232]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, locale.o(t._ZNSsaSEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>

<P><STRONG><a name="[1f3]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, locale.o(t._ZNSsaSERKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[175]"></a>std::map&lang;unsigned short, unsigned short, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bluenrggattserver.o(t._ZNSt3mapIttSt4lessItESaISt4pairIKttEEE4findERS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::map&lang;unsigned short, unsigned short, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&) &rArr; __rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::end()
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::find(const unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGGattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool)
</UL>

<P><STRONG><a name="[272]"></a>std::pair&lang;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, bool&rang;::pair(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;&, const bool&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bluenrggattserver.o(t._ZNSt4pairIN4__rw14__rw_tree_iterIS_IKttEiPS3_RS3_NS0_17__rw_rb_tree_nodeISaIS3_ES3_tNS0_11__select1stIS3_tEEEEEEbEC1ERKSB_RKb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::pair&lang;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, bool&rang;::pair(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;&, const bool&)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;::__rw_tree_iter(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned short, std::pair&lang;const unsigned short, unsigned short&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;, std::less&lang;unsigned short&rang;, std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned short, unsigned short&rang;&)
</UL>

<P><STRONG><a name="[2fb]"></a>std::pair&lang;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;, bool&rang;::pair__sub_object(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned short, unsigned short&rang;, int, std::pair&lang;const unsigned short, unsigned short&rang;*, std::pair&lang;const unsigned short, unsigned short&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned short, unsigned short&rang;&rang;, std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short, __rw::__select1st&lang;std::pair&lang;const unsigned short, unsigned short&rang;, unsigned short&rang;&rang;&rang;&, const bool&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, bluenrggattserver.o(t._ZNSt4pairIN4__rw14__rw_tree_iterIS_IKttEiPS3_RS3_NS0_17__rw_rb_tree_nodeISaIS3_ES3_tNS0_11__select1stIS3_tEEEEEEbEC1ERKSB_RKb), UNUSED)

<P><STRONG><a name="[274]"></a>const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, char.o(t._ZSt3maxIjERKT_S2_S2_))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[bd]"></a>__sti___8_main_cpp_ble</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __sti___8_main_cpp_ble &rArr; gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingParams::GapAdvertisingParams(GapAdvertisingParams::AdvertisingType, unsigned short, unsigned short)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::GapAdvertisingData()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::clear()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createBLEDeviceInstance()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[f5]"></a>hci_set_packet_complete_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[e7]"></a>enqueue_packet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enqueue_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Input
</UL>

<P><STRONG><a name="[115]"></a>gpio_write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bluenrg_shield_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gpio_write &rArr; mbed_assert_internal &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; NVIC_SetVector &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_RST
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BNRG_SPI_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Read_All
</UL>

<P><STRONG><a name="[be]"></a>__sti___17_BlueNRGDevice_cpp_ef81e865</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bluenrgdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___17_BlueNRGDevice_cpp_ef81e865 &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRGDevice::BlueNRGDevice()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bluenrgdevice.o(.init_array)
</UL>
<P><STRONG><a name="[bf]"></a>__sti___9_Utils_cpp_pc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = __sti___9_Utils_cpp_pc &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utils.o(.init_array)
</UL>
<P><STRONG><a name="[1cd]"></a>UART_SetConfig</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[77]"></a>gpio_irq0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_irq_api.o(i.gpio_irq0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq0 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[78]"></a>gpio_irq1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_irq_api.o(i.gpio_irq1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq1 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[79]"></a>gpio_irq2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_irq_api.o(i.gpio_irq2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq2 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[7a]"></a>gpio_irq3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_irq_api.o(i.gpio_irq3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq3 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[7b]"></a>gpio_irq4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_irq_api.o(i.gpio_irq4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq4 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[7c]"></a>gpio_irq5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_irq_api.o(i.gpio_irq5))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq5 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[7d]"></a>gpio_irq6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_irq_api.o(i.gpio_irq6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq6 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[24d]"></a>handle_interrupt_in</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, gpio_irq_api.o(i.handle_interrupt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = handle_interrupt_in
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq6
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq5
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq3
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq1
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq0
</UL>

<P><STRONG><a name="[24f]"></a>init_spi</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, spi_api.o(i.init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_spi &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[6c]"></a>&lang;Func1&rang;</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, SerialBase.o(i.<Func1>))
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[243]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[235]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vfprintf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[245]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[244]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[74]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[73]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[1e4]"></a>[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rwstdexcept.o(i._ZN37_INTERNAL_15_rwstdexcept_cpp_8697b68a4__rw13__rw_vfmatstrEPcjPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[1e6]"></a>[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)</STRONG> (Thumb, 296 bytes, Stack size 88 bytes, rwstdexcept.o(i._ZN37_INTERNAL_15_rwstdexcept_cpp_8697b68a4__rw13__rw_vfmatstrEPcjiSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>

<P><STRONG><a name="[19b]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[65]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>__sti___8_char_cpp_a3dc957a</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, char.o(i.__sti___8_char_cpp_a3dc957a))
<BR>[Address Reference Count : 1]<UL><LI> char.o(.init_array)
</UL>
<P><STRONG><a name="[6b]"></a>&lang;Func5&rang;</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, locale.o(i.<Func5>))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = &lang;Func5&rang; &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
</UL>
<P><STRONG><a name="[c1]"></a>__sti___10_locale_cpp_ff99fc7b</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, locale.o(i.__sti___10_locale_cpp_ff99fc7b))
<BR>[Address Reference Count : 1]<UL><LI> locale.o(.init_array)
</UL>
<P><STRONG><a name="[67]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>__sti___10_rwcats_cpp_64e8068e</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rwcats.o(i.__sti___10_rwcats_cpp_64e8068e))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __sti___10_rwcats_cpp_64e8068e &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(.init_array)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
